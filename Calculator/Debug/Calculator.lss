
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e56  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002e56  00002eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021cc  00000000  00000000  00002ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c48  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000099e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a43b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <main>
      7a:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_setupPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_setupPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <GPIO_setupPinDirection+0x1c>
     b50:	d5 c0       	rjmp	.+426    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	84 30       	cpi	r24, 0x04	; 4
     b56:	08 f0       	brcs	.+2      	; 0xb5a <GPIO_setupPinDirection+0x24>
     b58:	d1 c0       	rjmp	.+418    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <GPIO_setupPinDirection+0x3a>
     b6e:	43 c0       	rjmp	.+134    	; 0xbf6 <GPIO_setupPinDirection+0xc0>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <GPIO_setupPinDirection+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_setupPinDirection+0x68>
     b82:	bc c0       	rjmp	.+376    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_setupPinDirection+0x5a>
     b8e:	5f c0       	rjmp	.+190    	; 0xc4e <GPIO_setupPinDirection+0x118>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x66>
     b9a:	85 c0       	rjmp	.+266    	; 0xca6 <GPIO_setupPinDirection+0x170>
     b9c:	af c0       	rjmp	.+350    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a1 f4       	brne	.+40     	; 0xbcc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <GPIO_setupPinDirection+0x8c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <GPIO_setupPinDirection+0x88>
     bc6:	84 2b       	or	r24, r20
     bc8:	8c 93       	st	X, r24
     bca:	98 c0       	rjmp	.+304    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bcc:	aa e3       	ldi	r26, 0x3A	; 58
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e3       	ldi	r30, 0x3A	; 58
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	48 2f       	mov	r20, r24
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <GPIO_setupPinDirection+0xb4>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <GPIO_setupPinDirection+0xb0>
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	8c 93       	st	X, r24
     bf4:	83 c0       	rjmp	.+262    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	a1 f4       	brne	.+40     	; 0xc24 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     bfc:	a7 e3       	ldi	r26, 0x37	; 55
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e7 e3       	ldi	r30, 0x37	; 55
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <GPIO_setupPinDirection+0xe4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <GPIO_setupPinDirection+0xe0>
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	6c c0       	rjmp	.+216    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <GPIO_setupPinDirection+0x10c>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <GPIO_setupPinDirection+0x108>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	57 c0       	rjmp	.+174    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	a1 f4       	brne	.+40     	; 0xc7c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c54:	a4 e3       	ldi	r26, 0x34	; 52
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e4 e3       	ldi	r30, 0x34	; 52
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <GPIO_setupPinDirection+0x13c>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <GPIO_setupPinDirection+0x138>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	40 c0       	rjmp	.+128    	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c7c:	a4 e3       	ldi	r26, 0x34	; 52
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e3       	ldi	r30, 0x34	; 52
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	48 2f       	mov	r20, r24
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <GPIO_setupPinDirection+0x164>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <GPIO_setupPinDirection+0x160>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	2b c0       	rjmp	.+86     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	a1 f4       	brne	.+40     	; 0xcd4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cac:	a1 e3       	ldi	r26, 0x31	; 49
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e1 e3       	ldi	r30, 0x31	; 49
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <GPIO_setupPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <GPIO_setupPinDirection+0x190>
     cce:	84 2b       	or	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1b8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <GPIO_writePin+0x6>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <GPIO_writePin+0x8>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	6a 83       	std	Y+2, r22	; 0x02
     d1e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 30       	cpi	r24, 0x08	; 8
     d24:	08 f0       	brcs	.+2      	; 0xd28 <GPIO_writePin+0x1c>
     d26:	d5 c0       	rjmp	.+426    	; 0xed2 <GPIO_writePin+0x1c6>
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	08 f0       	brcs	.+2      	; 0xd30 <GPIO_writePin+0x24>
     d2e:	d1 c0       	rjmp	.+418    	; 0xed2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3d 83       	std	Y+5, r19	; 0x05
     d38:	2c 83       	std	Y+4, r18	; 0x04
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <GPIO_writePin+0x3a>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <GPIO_writePin+0xc0>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <GPIO_writePin+0x4e>
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	71 f0       	breq	.+28     	; 0xd74 <GPIO_writePin+0x68>
     d58:	bc c0       	rjmp	.+376    	; 0xed2 <GPIO_writePin+0x1c6>
     d5a:	2c 81       	ldd	r18, Y+4	; 0x04
     d5c:	3d 81       	ldd	r19, Y+5	; 0x05
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <GPIO_writePin+0x5a>
     d64:	5f c0       	rjmp	.+190    	; 0xe24 <GPIO_writePin+0x118>
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <GPIO_writePin+0x66>
     d70:	85 c0       	rjmp	.+266    	; 0xe7c <GPIO_writePin+0x170>
     d72:	af c0       	rjmp	.+350    	; 0xed2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f4       	brne	.+40     	; 0xda2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d7a:	ab e3       	ldi	r26, 0x3B	; 59
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	eb e3       	ldi	r30, 0x3B	; 59
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_writePin+0x8c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_writePin+0x88>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	98 c0       	rjmp	.+304    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     da2:	ab e3       	ldi	r26, 0x3B	; 59
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	eb e3       	ldi	r30, 0x3B	; 59
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <GPIO_writePin+0xb4>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <GPIO_writePin+0xb0>
     dc4:	80 95       	com	r24
     dc6:	84 23       	and	r24, r20
     dc8:	8c 93       	st	X, r24
     dca:	83 c0       	rjmp	.+262    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	a1 f4       	brne	.+40     	; 0xdfa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_writePin+0xe4>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_writePin+0xe0>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	6c c0       	rjmp	.+216    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <GPIO_writePin+0x10c>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <GPIO_writePin+0x108>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	57 c0       	rjmp	.+174    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f4       	brne	.+40     	; 0xe52 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e2a:	a5 e3       	ldi	r26, 0x35	; 53
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_writePin+0x13c>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_writePin+0x138>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	40 c0       	rjmp	.+128    	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <GPIO_writePin+0x164>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <GPIO_writePin+0x160>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	2b c0       	rjmp	.+86     	; 0xed2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	a1 f4       	brne	.+40     	; 0xeaa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e82:	a2 e3       	ldi	r26, 0x32	; 50
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e2 e3       	ldi	r30, 0x32	; 50
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_writePin+0x194>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_writePin+0x190>
     ea4:	84 2b       	or	r24, r20
     ea6:	8c 93       	st	X, r24
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_writePin+0x1bc>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_writePin+0x1b8>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <GPIO_readPin+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <GPIO_readPin+0x8>
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	8a 83       	std	Y+2, r24	; 0x02
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     ef4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <GPIO_readPin+0x1c>
     efc:	84 c0       	rjmp	.+264    	; 0x1006 <GPIO_readPin+0x124>
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	84 30       	cpi	r24, 0x04	; 4
     f02:	08 f0       	brcs	.+2      	; 0xf06 <GPIO_readPin+0x24>
     f04:	80 c0       	rjmp	.+256    	; 0x1006 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3d 83       	std	Y+5, r19	; 0x05
     f0e:	2c 83       	std	Y+4, r18	; 0x04
     f10:	4c 81       	ldd	r20, Y+4	; 0x04
     f12:	5d 81       	ldd	r21, Y+5	; 0x05
     f14:	41 30       	cpi	r20, 0x01	; 1
     f16:	51 05       	cpc	r21, r1
     f18:	79 f1       	breq	.+94     	; 0xf78 <GPIO_readPin+0x96>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	91 05       	cpc	r25, r1
     f22:	34 f4       	brge	.+12     	; 0xf30 <GPIO_readPin+0x4e>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	21 15       	cp	r18, r1
     f2a:	31 05       	cpc	r19, r1
     f2c:	69 f0       	breq	.+26     	; 0xf48 <GPIO_readPin+0x66>
     f2e:	6b c0       	rjmp	.+214    	; 0x1006 <GPIO_readPin+0x124>
     f30:	4c 81       	ldd	r20, Y+4	; 0x04
     f32:	5d 81       	ldd	r21, Y+5	; 0x05
     f34:	42 30       	cpi	r20, 0x02	; 2
     f36:	51 05       	cpc	r21, r1
     f38:	b9 f1       	breq	.+110    	; 0xfa8 <GPIO_readPin+0xc6>
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	09 f4       	brne	.+2      	; 0xf46 <GPIO_readPin+0x64>
     f44:	49 c0       	rjmp	.+146    	; 0xfd8 <GPIO_readPin+0xf6>
     f46:	5f c0       	rjmp	.+190    	; 0x1006 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f48:	e9 e3       	ldi	r30, 0x39	; 57
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_readPin+0x7e>
     f5c:	55 95       	asr	r21
     f5e:	47 95       	ror	r20
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_readPin+0x7a>
     f64:	ca 01       	movw	r24, r20
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	88 23       	and	r24, r24
     f6c:	19 f0       	breq	.+6      	; 0xf74 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	49 c0       	rjmp	.+146    	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	47 c0       	rjmp	.+142    	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f78:	e6 e3       	ldi	r30, 0x36	; 54
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <GPIO_readPin+0xae>
     f8c:	55 95       	asr	r21
     f8e:	47 95       	ror	r20
     f90:	8a 95       	dec	r24
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <GPIO_readPin+0xaa>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	88 23       	and	r24, r24
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	31 c0       	rjmp	.+98     	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	2f c0       	rjmp	.+94     	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fa8:	e3 e3       	ldi	r30, 0x33	; 51
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <GPIO_readPin+0xde>
     fbc:	55 95       	asr	r21
     fbe:	47 95       	ror	r20
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <GPIO_readPin+0xda>
     fc4:	ca 01       	movw	r24, r20
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 23       	and	r24, r24
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	19 c0       	rjmp	.+50     	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fd8:	e0 e3       	ldi	r30, 0x30	; 48
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a9 01       	movw	r20, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_readPin+0x10e>
     fec:	55 95       	asr	r21
     fee:	47 95       	ror	r20
     ff0:	8a 95       	dec	r24
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_readPin+0x10a>
     ff4:	ca 01       	movw	r24, r20
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	90 70       	andi	r25, 0x00	; 0
     ffa:	88 23       	and	r24, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	89 83       	std	Y+1, r24	; 0x01
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1004:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <GPIO_setupPortDirection+0x6>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <GPIO_setupPortDirection+0x8>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	90 f5       	brcc	.+100    	; 0x1092 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 83       	std	Y+4, r19	; 0x04
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	d1 f0       	breq	.+52     	; 0x1076 <GPIO_setupPortDirection+0x5e>
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	3c 81       	ldd	r19, Y+4	; 0x04
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <GPIO_setupPortDirection+0x3e>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	61 f0       	breq	.+24     	; 0x106c <GPIO_setupPortDirection+0x54>
    1054:	1e c0       	rjmp	.+60     	; 0x1092 <GPIO_setupPortDirection+0x7a>
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	81 f0       	breq	.+32     	; 0x1080 <GPIO_setupPortDirection+0x68>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	81 f0       	breq	.+32     	; 0x108a <GPIO_setupPortDirection+0x72>
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	80 83       	st	Z, r24
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1076:	e7 e3       	ldi	r30, 0x37	; 55
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 83       	st	Z, r24
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    108a:	e1 e3       	ldi	r30, 0x31	; 49
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
			break;
		}
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <GPIO_writePort+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <GPIO_writePort+0x8>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	90 f5       	brcc	.+100    	; 0x111a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3c 83       	std	Y+4, r19	; 0x04
    10be:	2b 83       	std	Y+3, r18	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <GPIO_writePort+0x5e>
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <GPIO_writePort+0x3e>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <GPIO_writePort+0x54>
    10dc:	1e c0       	rjmp	.+60     	; 0x111a <GPIO_writePort+0x7a>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <GPIO_writePort+0x68>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <GPIO_writePort+0x72>
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    10f4:	eb e3       	ldi	r30, 0x3B	; 59
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	80 83       	st	Z, r24
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    10fe:	e8 e3       	ldi	r30, 0x38	; 56
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	80 83       	st	Z, r24
    1106:	09 c0       	rjmp	.+18     	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1108:	e5 e3       	ldi	r30, 0x35	; 53
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	04 c0       	rjmp	.+8      	; 0x111a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
			break;
		}
	}
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <GPIO_readPort+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <GPIO_readPort+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1136:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	90 f5       	brcc	.+100    	; 0x11a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3c 83       	std	Y+4, r19	; 0x04
    1146:	2b 83       	std	Y+3, r18	; 0x03
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	d1 f0       	breq	.+52     	; 0x1186 <GPIO_readPort+0x5e>
    1152:	2b 81       	ldd	r18, Y+3	; 0x03
    1154:	3c 81       	ldd	r19, Y+4	; 0x04
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <GPIO_readPort+0x3e>
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 f0       	breq	.+24     	; 0x117c <GPIO_readPort+0x54>
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <GPIO_readPort+0x7a>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	3c 81       	ldd	r19, Y+4	; 0x04
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	81 f0       	breq	.+32     	; 0x1190 <GPIO_readPort+0x68>
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	81 f0       	breq	.+32     	; 0x119a <GPIO_readPort+0x72>
    117a:	13 c0       	rjmp	.+38     	; 0x11a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    117c:	e9 e3       	ldi	r30, 0x39	; 57
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	0e c0       	rjmp	.+28     	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1186:	e6 e3       	ldi	r30, 0x36	; 54
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    119a:	e0 e3       	ldi	r30, 0x30	; 48
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	60 97       	sbiw	r28, 0x10	; 16
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	63 e0       	ldi	r22, 0x03	; 3
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	64 e0       	ldi	r22, 0x04	; 4
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	65 e0       	ldi	r22, 0x05	; 5
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	66 e0       	ldi	r22, 0x06	; 6
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	67 e0       	ldi	r22, 0x07	; 7
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1216:	1f 86       	std	Y+15, r1	; 0x0f
    1218:	ab c0       	rjmp	.+342    	; 0x1370 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	6f 85       	ldd	r22, Y+15	; 0x0f
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	6f 85       	ldd	r22, Y+15	; 0x0f
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    122e:	18 8a       	std	Y+16, r1	; 0x10
    1230:	22 c0       	rjmp	.+68     	; 0x1276 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1232:	88 89       	ldd	r24, Y+16	; 0x10
    1234:	98 2f       	mov	r25, r24
    1236:	9c 5f       	subi	r25, 0xFC	; 252
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	69 2f       	mov	r22, r25
    123c:	0e 94 71 07 	call	0xee2	; 0xee2 <GPIO_readPin>
    1240:	88 23       	and	r24, r24
    1242:	b1 f4       	brne	.+44     	; 0x1270 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1244:	8f 85       	ldd	r24, Y+15	; 0x0f
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	98 2f       	mov	r25, r24
    1254:	88 89       	ldd	r24, Y+16	; 0x10
    1256:	89 0f       	add	r24, r25
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	0e 94 bd 09 	call	0x137a	; 0x137a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    125e:	60 96       	adiw	r28, 0x10	; 16
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1270:	88 89       	ldd	r24, Y+16	; 0x10
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	88 8b       	std	Y+16, r24	; 0x10
    1276:	88 89       	ldd	r24, Y+16	; 0x10
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	d8 f2       	brcs	.-74     	; 0x1232 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 ea       	ldi	r26, 0xA0	; 160
    128c:	b0 e4       	ldi	r27, 0x40	; 64
    128e:	8b 87       	std	Y+11, r24	; 0x0b
    1290:	9c 87       	std	Y+12, r25	; 0x0c
    1292:	ad 87       	std	Y+13, r26	; 0x0d
    1294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	6b 85       	ldd	r22, Y+11	; 0x0b
    1298:	7c 85       	ldd	r23, Y+12	; 0x0c
    129a:	8d 85       	ldd	r24, Y+13	; 0x0d
    129c:	9e 85       	ldd	r25, Y+14	; 0x0e
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a e7       	ldi	r20, 0x7A	; 122
    12a4:	53 e4       	ldi	r21, 0x43	; 67
    12a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8f 83       	std	Y+7, r24	; 0x07
    12b0:	98 87       	std	Y+8, r25	; 0x08
    12b2:	a9 87       	std	Y+9, r26	; 0x09
    12b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b6:	6f 81       	ldd	r22, Y+7	; 0x07
    12b8:	78 85       	ldd	r23, Y+8	; 0x08
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <KEYPAD_getPressedKey+0x186>
    131a:	89 e1       	ldi	r24, 0x19	; 25
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <KEYPAD_getPressedKey+0x174>
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <KEYPAD_getPressedKey+0x168>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6f 81       	ldd	r22, Y+7	; 0x07
    1344:	78 85       	ldd	r23, Y+8	; 0x08
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <KEYPAD_getPressedKey+0x1b0>
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    136a:	8f 85       	ldd	r24, Y+15	; 0x0f
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	8f 87       	std	Y+15, r24	; 0x0f
    1370:	8f 85       	ldd	r24, Y+15	; 0x0f
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	08 f4       	brcc	.+2      	; 0x1378 <KEYPAD_getPressedKey+0x1c6>
    1376:	51 cf       	rjmp	.-350    	; 0x121a <KEYPAD_getPressedKey+0x68>
    1378:	4e cf       	rjmp	.-356    	; 0x1216 <KEYPAD_getPressedKey+0x64>

0000137a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1388:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3c 83       	std	Y+4, r19	; 0x04
    1392:	2b 83       	std	Y+3, r18	; 0x03
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	88 30       	cpi	r24, 0x08	; 8
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    139e:	70 c0       	rjmp	.+224    	; 0x1480 <KEYPAD_4x4_adjustKeyNumber+0x106>
    13a0:	2b 81       	ldd	r18, Y+3	; 0x03
    13a2:	3c 81       	ldd	r19, Y+4	; 0x04
    13a4:	29 30       	cpi	r18, 0x09	; 9
    13a6:	31 05       	cpc	r19, r1
    13a8:	5c f5       	brge	.+86     	; 0x1400 <KEYPAD_4x4_adjustKeyNumber+0x86>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	91 05       	cpc	r25, r1
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    13b4:	59 c0       	rjmp	.+178    	; 0x1468 <KEYPAD_4x4_adjustKeyNumber+0xee>
    13b6:	2b 81       	ldd	r18, Y+3	; 0x03
    13b8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ba:	25 30       	cpi	r18, 0x05	; 5
    13bc:	31 05       	cpc	r19, r1
    13be:	9c f4       	brge	.+38     	; 0x13e6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	91 05       	cpc	r25, r1
    13c8:	09 f4       	brne	.+2      	; 0x13cc <KEYPAD_4x4_adjustKeyNumber+0x52>
    13ca:	48 c0       	rjmp	.+144    	; 0x145c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    13cc:	2b 81       	ldd	r18, Y+3	; 0x03
    13ce:	3c 81       	ldd	r19, Y+4	; 0x04
    13d0:	23 30       	cpi	r18, 0x03	; 3
    13d2:	31 05       	cpc	r19, r1
    13d4:	0c f0       	brlt	.+2      	; 0x13d8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    13d6:	45 c0       	rjmp	.+138    	; 0x1462 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    13e2:	39 c0       	rjmp	.+114    	; 0x1456 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    13e4:	67 c0       	rjmp	.+206    	; 0x14b4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    13e6:	2b 81       	ldd	r18, Y+3	; 0x03
    13e8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ea:	26 30       	cpi	r18, 0x06	; 6
    13ec:	31 05       	cpc	r19, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    13f0:	41 c0       	rjmp	.+130    	; 0x1474 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	87 30       	cpi	r24, 0x07	; 7
    13f8:	91 05       	cpc	r25, r1
    13fa:	0c f0       	brlt	.+2      	; 0x13fe <KEYPAD_4x4_adjustKeyNumber+0x84>
    13fc:	3e c0       	rjmp	.+124    	; 0x147a <KEYPAD_4x4_adjustKeyNumber+0x100>
    13fe:	37 c0       	rjmp	.+110    	; 0x146e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	2c 30       	cpi	r18, 0x0C	; 12
    1406:	31 05       	cpc	r19, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <KEYPAD_4x4_adjustKeyNumber+0x92>
    140a:	46 c0       	rjmp	.+140    	; 0x1498 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	8d 30       	cpi	r24, 0x0D	; 13
    1412:	91 05       	cpc	r25, r1
    1414:	5c f4       	brge	.+22     	; 0x142c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1416:	2b 81       	ldd	r18, Y+3	; 0x03
    1418:	3c 81       	ldd	r19, Y+4	; 0x04
    141a:	2a 30       	cpi	r18, 0x0A	; 10
    141c:	31 05       	cpc	r19, r1
    141e:	b1 f1       	breq	.+108    	; 0x148c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	8b 30       	cpi	r24, 0x0B	; 11
    1426:	91 05       	cpc	r25, r1
    1428:	a4 f5       	brge	.+104    	; 0x1492 <KEYPAD_4x4_adjustKeyNumber+0x118>
    142a:	2d c0       	rjmp	.+90     	; 0x1486 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    142c:	2b 81       	ldd	r18, Y+3	; 0x03
    142e:	3c 81       	ldd	r19, Y+4	; 0x04
    1430:	2e 30       	cpi	r18, 0x0E	; 14
    1432:	31 05       	cpc	r19, r1
    1434:	b9 f1       	breq	.+110    	; 0x14a4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	8e 30       	cpi	r24, 0x0E	; 14
    143c:	91 05       	cpc	r25, r1
    143e:	7c f1       	brlt	.+94     	; 0x149e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1440:	2b 81       	ldd	r18, Y+3	; 0x03
    1442:	3c 81       	ldd	r19, Y+4	; 0x04
    1444:	2f 30       	cpi	r18, 0x0F	; 15
    1446:	31 05       	cpc	r19, r1
    1448:	79 f1       	breq	.+94     	; 0x14a8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	9c 81       	ldd	r25, Y+4	; 0x04
    144e:	80 31       	cpi	r24, 0x10	; 16
    1450:	91 05       	cpc	r25, r1
    1452:	69 f1       	breq	.+90     	; 0x14ae <KEYPAD_4x4_adjustKeyNumber+0x134>
    1454:	2f c0       	rjmp	.+94     	; 0x14b4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1456:	87 e0       	ldi	r24, 0x07	; 7
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	2e c0       	rjmp	.+92     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    145c:	88 e0       	ldi	r24, 0x08	; 8
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	2b c0       	rjmp	.+86     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1462:	89 e0       	ldi	r24, 0x09	; 9
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	28 c0       	rjmp	.+80     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1468:	85 e2       	ldi	r24, 0x25	; 37
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	25 c0       	rjmp	.+74     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    146e:	84 e0       	ldi	r24, 0x04	; 4
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	22 c0       	rjmp	.+68     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1474:	85 e0       	ldi	r24, 0x05	; 5
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	1f c0       	rjmp	.+62     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    147a:	86 e0       	ldi	r24, 0x06	; 6
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	1c c0       	rjmp	.+56     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1480:	8a e2       	ldi	r24, 0x2A	; 42
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	19 c0       	rjmp	.+50     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	16 c0       	rjmp	.+44     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	13 c0       	rjmp	.+38     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	10 c0       	rjmp	.+32     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1498:	8d e2       	ldi	r24, 0x2D	; 45
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	0d c0       	rjmp	.+26     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    149e:	8d e0       	ldi	r24, 0x0D	; 13
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    14a8:	8d e3       	ldi	r24, 0x3D	; 61
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    14ae:	8b e2       	ldi	r24, 0x2B	; 43
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	2e 97       	sbiw	r28, 0x0e	; 14
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	64 e0       	ldi	r22, 0x04	; 4
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    14e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    14e6:	83 e0       	ldi	r24, 0x03	; 3
    14e8:	65 e0       	ldi	r22, 0x05	; 5
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 ea       	ldi	r26, 0xA0	; 160
    14f6:	b1 e4       	ldi	r27, 0x41	; 65
    14f8:	8b 87       	std	Y+11, r24	; 0x0b
    14fa:	9c 87       	std	Y+12, r25	; 0x0c
    14fc:	ad 87       	std	Y+13, r26	; 0x0d
    14fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	4a e7       	ldi	r20, 0x7A	; 122
    150e:	53 e4       	ldi	r21, 0x43	; 67
    1510:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	8f 83       	std	Y+7, r24	; 0x07
    151a:	98 87       	std	Y+8, r25	; 0x08
    151c:	a9 87       	std	Y+9, r26	; 0x09
    151e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e8       	ldi	r20, 0x80	; 128
    152e:	5f e3       	ldi	r21, 0x3F	; 63
    1530:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1534:	88 23       	and	r24, r24
    1536:	2c f4       	brge	.+10     	; 0x1542 <LCD_init+0x7a>
		__ticks = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	3f c0       	rjmp	.+126    	; 0x15c0 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	3f ef       	ldi	r19, 0xFF	; 255
    154e:	4f e7       	ldi	r20, 0x7F	; 127
    1550:	57 e4       	ldi	r21, 0x47	; 71
    1552:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1556:	18 16       	cp	r1, r24
    1558:	4c f5       	brge	.+82     	; 0x15ac <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e2       	ldi	r20, 0x20	; 32
    1568:	51 e4       	ldi	r21, 0x41	; 65
    156a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	bc 01       	movw	r22, r24
    1574:	cd 01       	movw	r24, r26
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <LCD_init+0xda>
    1584:	89 e1       	ldi	r24, 0x19	; 25
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9c 83       	std	Y+4, r25	; 0x04
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	f1 f7       	brne	.-4      	; 0x1590 <LCD_init+0xc8>
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a2:	8d 81       	ldd	r24, Y+5	; 0x05
    15a4:	9e 81       	ldd	r25, Y+6	; 0x06
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	69 f7       	brne	.-38     	; 0x1584 <LCD_init+0xbc>
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <LCD_init+0x104>
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	6f ef       	ldi	r22, 0xFF	; 255
    15d8:	0e 94 0c 08 	call	0x1018	; 0x1018 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    15dc:	88 e3       	ldi	r24, 0x38	; 56
    15de:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    15e2:	8c e0       	ldi	r24, 0x0C	; 12
    15e4:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
}
    15ee:	2e 96       	adiw	r28, 0x0e	; 14
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	e9 97       	sbiw	r28, 0x39	; 57
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1616:	83 e0       	ldi	r24, 0x03	; 3
    1618:	64 e0       	ldi	r22, 0x04	; 4
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 e8       	ldi	r26, 0x80	; 128
    1626:	bf e3       	ldi	r27, 0x3F	; 63
    1628:	8d ab       	std	Y+53, r24	; 0x35
    162a:	9e ab       	std	Y+54, r25	; 0x36
    162c:	af ab       	std	Y+55, r26	; 0x37
    162e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1630:	6d a9       	ldd	r22, Y+53	; 0x35
    1632:	7e a9       	ldd	r23, Y+54	; 0x36
    1634:	8f a9       	ldd	r24, Y+55	; 0x37
    1636:	98 ad       	ldd	r25, Y+56	; 0x38
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a e7       	ldi	r20, 0x7A	; 122
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	89 ab       	std	Y+49, r24	; 0x31
    164a:	9a ab       	std	Y+50, r25	; 0x32
    164c:	ab ab       	std	Y+51, r26	; 0x33
    164e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1650:	69 a9       	ldd	r22, Y+49	; 0x31
    1652:	7a a9       	ldd	r23, Y+50	; 0x32
    1654:	8b a9       	ldd	r24, Y+51	; 0x33
    1656:	9c a9       	ldd	r25, Y+52	; 0x34
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <LCD_sendCommand+0x72>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	98 ab       	std	Y+48, r25	; 0x30
    166e:	8f a7       	std	Y+47, r24	; 0x2f
    1670:	3f c0       	rjmp	.+126    	; 0x16f0 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1672:	69 a9       	ldd	r22, Y+49	; 0x31
    1674:	7a a9       	ldd	r23, Y+50	; 0x32
    1676:	8b a9       	ldd	r24, Y+51	; 0x33
    1678:	9c a9       	ldd	r25, Y+52	; 0x34
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	3f ef       	ldi	r19, 0xFF	; 255
    167e:	4f e7       	ldi	r20, 0x7F	; 127
    1680:	57 e4       	ldi	r21, 0x47	; 71
    1682:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1686:	18 16       	cp	r1, r24
    1688:	4c f5       	brge	.+82     	; 0x16dc <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	6d a9       	ldd	r22, Y+53	; 0x35
    168c:	7e a9       	ldd	r23, Y+54	; 0x36
    168e:	8f a9       	ldd	r24, Y+55	; 0x37
    1690:	98 ad       	ldd	r25, Y+56	; 0x38
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	51 e4       	ldi	r21, 0x41	; 65
    169a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	98 ab       	std	Y+48, r25	; 0x30
    16b0:	8f a7       	std	Y+47, r24	; 0x2f
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <LCD_sendCommand+0xd2>
    16b4:	89 e1       	ldi	r24, 0x19	; 25
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9e a7       	std	Y+46, r25	; 0x2e
    16ba:	8d a7       	std	Y+45, r24	; 0x2d
    16bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    16be:	9e a5       	ldd	r25, Y+46	; 0x2e
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCD_sendCommand+0xc0>
    16c4:	9e a7       	std	Y+46, r25	; 0x2e
    16c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ca:	98 a9       	ldd	r25, Y+48	; 0x30
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	98 ab       	std	Y+48, r25	; 0x30
    16d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d4:	98 a9       	ldd	r25, Y+48	; 0x30
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <LCD_sendCommand+0xb4>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	69 a9       	ldd	r22, Y+49	; 0x31
    16de:	7a a9       	ldd	r23, Y+50	; 0x32
    16e0:	8b a9       	ldd	r24, Y+51	; 0x33
    16e2:	9c a9       	ldd	r25, Y+52	; 0x34
    16e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	98 ab       	std	Y+48, r25	; 0x30
    16ee:	8f a7       	std	Y+47, r24	; 0x2f
    16f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16f2:	98 a9       	ldd	r25, Y+48	; 0x30
    16f4:	9c a7       	std	Y+44, r25	; 0x2c
    16f6:	8b a7       	std	Y+43, r24	; 0x2b
    16f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <LCD_sendCommand+0xfc>
    1700:	9c a7       	std	Y+44, r25	; 0x2c
    1702:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1704:	83 e0       	ldi	r24, 0x03	; 3
    1706:	65 e0       	ldi	r22, 0x05	; 5
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e8       	ldi	r26, 0x80	; 128
    1714:	bf e3       	ldi	r27, 0x3F	; 63
    1716:	8f a3       	std	Y+39, r24	; 0x27
    1718:	98 a7       	std	Y+40, r25	; 0x28
    171a:	a9 a7       	std	Y+41, r26	; 0x29
    171c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171e:	6f a1       	ldd	r22, Y+39	; 0x27
    1720:	78 a5       	ldd	r23, Y+40	; 0x28
    1722:	89 a5       	ldd	r24, Y+41	; 0x29
    1724:	9a a5       	ldd	r25, Y+42	; 0x2a
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a e7       	ldi	r20, 0x7A	; 122
    172c:	53 e4       	ldi	r21, 0x43	; 67
    172e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	8b a3       	std	Y+35, r24	; 0x23
    1738:	9c a3       	std	Y+36, r25	; 0x24
    173a:	ad a3       	std	Y+37, r26	; 0x25
    173c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    173e:	6b a1       	ldd	r22, Y+35	; 0x23
    1740:	7c a1       	ldd	r23, Y+36	; 0x24
    1742:	8d a1       	ldd	r24, Y+37	; 0x25
    1744:	9e a1       	ldd	r25, Y+38	; 0x26
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <LCD_sendCommand+0x160>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9a a3       	std	Y+34, r25	; 0x22
    175c:	89 a3       	std	Y+33, r24	; 0x21
    175e:	3f c0       	rjmp	.+126    	; 0x17de <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1760:	6b a1       	ldd	r22, Y+35	; 0x23
    1762:	7c a1       	ldd	r23, Y+36	; 0x24
    1764:	8d a1       	ldd	r24, Y+37	; 0x25
    1766:	9e a1       	ldd	r25, Y+38	; 0x26
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 e4       	ldi	r21, 0x47	; 71
    1770:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	4c f5       	brge	.+82     	; 0x17ca <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1778:	6f a1       	ldd	r22, Y+39	; 0x27
    177a:	78 a5       	ldd	r23, Y+40	; 0x28
    177c:	89 a5       	ldd	r24, Y+41	; 0x29
    177e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9a a3       	std	Y+34, r25	; 0x22
    179e:	89 a3       	std	Y+33, r24	; 0x21
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <LCD_sendCommand+0x1c0>
    17a2:	89 e1       	ldi	r24, 0x19	; 25
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	98 a3       	std	Y+32, r25	; 0x20
    17a8:	8f 8f       	std	Y+31, r24	; 0x1f
    17aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ac:	98 a1       	ldd	r25, Y+32	; 0x20
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_sendCommand+0x1ae>
    17b2:	98 a3       	std	Y+32, r25	; 0x20
    17b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	89 a1       	ldd	r24, Y+33	; 0x21
    17b8:	9a a1       	ldd	r25, Y+34	; 0x22
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9a a3       	std	Y+34, r25	; 0x22
    17be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	89 a1       	ldd	r24, Y+33	; 0x21
    17c2:	9a a1       	ldd	r25, Y+34	; 0x22
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <LCD_sendCommand+0x1a2>
    17c8:	14 c0       	rjmp	.+40     	; 0x17f2 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	6b a1       	ldd	r22, Y+35	; 0x23
    17cc:	7c a1       	ldd	r23, Y+36	; 0x24
    17ce:	8d a1       	ldd	r24, Y+37	; 0x25
    17d0:	9e a1       	ldd	r25, Y+38	; 0x26
    17d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9a a3       	std	Y+34, r25	; 0x22
    17dc:	89 a3       	std	Y+33, r24	; 0x21
    17de:	89 a1       	ldd	r24, Y+33	; 0x21
    17e0:	9a a1       	ldd	r25, Y+34	; 0x22
    17e2:	9e 8f       	std	Y+30, r25	; 0x1e
    17e4:	8d 8f       	std	Y+29, r24	; 0x1d
    17e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_sendCommand+0x1ea>
    17ee:	9e 8f       	std	Y+30, r25	; 0x1e
    17f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	69 ad       	ldd	r22, Y+57	; 0x39
    17f6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <GPIO_writePort>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e8       	ldi	r26, 0x80	; 128
    1800:	bf e3       	ldi	r27, 0x3F	; 63
    1802:	89 8f       	std	Y+25, r24	; 0x19
    1804:	9a 8f       	std	Y+26, r25	; 0x1a
    1806:	ab 8f       	std	Y+27, r26	; 0x1b
    1808:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	69 8d       	ldd	r22, Y+25	; 0x19
    180c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1810:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	53 e4       	ldi	r21, 0x43	; 67
    181a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8d 8b       	std	Y+21, r24	; 0x15
    1824:	9e 8b       	std	Y+22, r25	; 0x16
    1826:	af 8b       	std	Y+23, r26	; 0x17
    1828:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    182a:	6d 89       	ldd	r22, Y+21	; 0x15
    182c:	7e 89       	ldd	r23, Y+22	; 0x16
    182e:	8f 89       	ldd	r24, Y+23	; 0x17
    1830:	98 8d       	ldd	r25, Y+24	; 0x18
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	2c f4       	brge	.+10     	; 0x184c <LCD_sendCommand+0x24c>
		__ticks = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9c 8b       	std	Y+20, r25	; 0x14
    1848:	8b 8b       	std	Y+19, r24	; 0x13
    184a:	3f c0       	rjmp	.+126    	; 0x18ca <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    184c:	6d 89       	ldd	r22, Y+21	; 0x15
    184e:	7e 89       	ldd	r23, Y+22	; 0x16
    1850:	8f 89       	ldd	r24, Y+23	; 0x17
    1852:	98 8d       	ldd	r25, Y+24	; 0x18
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	57 e4       	ldi	r21, 0x47	; 71
    185c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	4c f5       	brge	.+82     	; 0x18b6 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	69 8d       	ldd	r22, Y+25	; 0x19
    1866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    186a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e2       	ldi	r20, 0x20	; 32
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9c 8b       	std	Y+20, r25	; 0x14
    188a:	8b 8b       	std	Y+19, r24	; 0x13
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <LCD_sendCommand+0x2ac>
    188e:	89 e1       	ldi	r24, 0x19	; 25
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9a 8b       	std	Y+18, r25	; 0x12
    1894:	89 8b       	std	Y+17, r24	; 0x11
    1896:	89 89       	ldd	r24, Y+17	; 0x11
    1898:	9a 89       	ldd	r25, Y+18	; 0x12
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_sendCommand+0x29a>
    189e:	9a 8b       	std	Y+18, r25	; 0x12
    18a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	8b 89       	ldd	r24, Y+19	; 0x13
    18a4:	9c 89       	ldd	r25, Y+20	; 0x14
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	9c 8b       	std	Y+20, r25	; 0x14
    18aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	8b 89       	ldd	r24, Y+19	; 0x13
    18ae:	9c 89       	ldd	r25, Y+20	; 0x14
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	69 f7       	brne	.-38     	; 0x188e <LCD_sendCommand+0x28e>
    18b4:	14 c0       	rjmp	.+40     	; 0x18de <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	6d 89       	ldd	r22, Y+21	; 0x15
    18b8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ba:	8f 89       	ldd	r24, Y+23	; 0x17
    18bc:	98 8d       	ldd	r25, Y+24	; 0x18
    18be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	9c 8b       	std	Y+20, r25	; 0x14
    18c8:	8b 8b       	std	Y+19, r24	; 0x13
    18ca:	8b 89       	ldd	r24, Y+19	; 0x13
    18cc:	9c 89       	ldd	r25, Y+20	; 0x14
    18ce:	98 8b       	std	Y+16, r25	; 0x10
    18d0:	8f 87       	std	Y+15, r24	; 0x0f
    18d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d4:	98 89       	ldd	r25, Y+16	; 0x10
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <LCD_sendCommand+0x2d6>
    18da:	98 8b       	std	Y+16, r25	; 0x10
    18dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    18de:	83 e0       	ldi	r24, 0x03	; 3
    18e0:	65 e0       	ldi	r22, 0x05	; 5
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	bf e3       	ldi	r27, 0x3F	; 63
    18f0:	8b 87       	std	Y+11, r24	; 0x0b
    18f2:	9c 87       	std	Y+12, r25	; 0x0c
    18f4:	ad 87       	std	Y+13, r26	; 0x0d
    18f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a e7       	ldi	r20, 0x7A	; 122
    1906:	53 e4       	ldi	r21, 0x43	; 67
    1908:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8f 83       	std	Y+7, r24	; 0x07
    1912:	98 87       	std	Y+8, r25	; 0x08
    1914:	a9 87       	std	Y+9, r26	; 0x09
    1916:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1918:	6f 81       	ldd	r22, Y+7	; 0x07
    191a:	78 85       	ldd	r23, Y+8	; 0x08
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <LCD_sendCommand+0x33a>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    193a:	6f 81       	ldd	r22, Y+7	; 0x07
    193c:	78 85       	ldd	r23, Y+8	; 0x08
    193e:	89 85       	ldd	r24, Y+9	; 0x09
    1940:	9a 85       	ldd	r25, Y+10	; 0x0a
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	6b 85       	ldd	r22, Y+11	; 0x0b
    1954:	7c 85       	ldd	r23, Y+12	; 0x0c
    1956:	8d 85       	ldd	r24, Y+13	; 0x0d
    1958:	9e 85       	ldd	r25, Y+14	; 0x0e
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	8d 83       	std	Y+5, r24	; 0x05
    197a:	0f c0       	rjmp	.+30     	; 0x199a <LCD_sendCommand+0x39a>
    197c:	89 e1       	ldi	r24, 0x19	; 25
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9c 83       	std	Y+4, r25	; 0x04
    1982:	8b 83       	std	Y+3, r24	; 0x03
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <LCD_sendCommand+0x388>
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	9e 81       	ldd	r25, Y+6	; 0x06
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <LCD_sendCommand+0x37c>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	6f 81       	ldd	r22, Y+7	; 0x07
    19a6:	78 85       	ldd	r23, Y+8	; 0x08
    19a8:	89 85       	ldd	r24, Y+9	; 0x09
    19aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	9a 83       	std	Y+2, r25	; 0x02
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <LCD_sendCommand+0x3c4>
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    19cc:	e9 96       	adiw	r28, 0x39	; 57
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	08 95       	ret

000019de <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    19de:	df 93       	push	r29
    19e0:	cf 93       	push	r28
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	e9 97       	sbiw	r28, 0x39	; 57
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	64 e0       	ldi	r22, 0x04	; 4
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a0 e8       	ldi	r26, 0x80	; 128
    1a04:	bf e3       	ldi	r27, 0x3F	; 63
    1a06:	8d ab       	std	Y+53, r24	; 0x35
    1a08:	9e ab       	std	Y+54, r25	; 0x36
    1a0a:	af ab       	std	Y+55, r26	; 0x37
    1a0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1a10:	7e a9       	ldd	r23, Y+54	; 0x36
    1a12:	8f a9       	ldd	r24, Y+55	; 0x37
    1a14:	98 ad       	ldd	r25, Y+56	; 0x38
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	4a e7       	ldi	r20, 0x7A	; 122
    1a1c:	53 e4       	ldi	r21, 0x43	; 67
    1a1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	89 ab       	std	Y+49, r24	; 0x31
    1a28:	9a ab       	std	Y+50, r25	; 0x32
    1a2a:	ab ab       	std	Y+51, r26	; 0x33
    1a2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a30:	7a a9       	ldd	r23, Y+50	; 0x32
    1a32:	8b a9       	ldd	r24, Y+51	; 0x33
    1a34:	9c a9       	ldd	r25, Y+52	; 0x34
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e8       	ldi	r20, 0x80	; 128
    1a3c:	5f e3       	ldi	r21, 0x3F	; 63
    1a3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a42:	88 23       	and	r24, r24
    1a44:	2c f4       	brge	.+10     	; 0x1a50 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	98 ab       	std	Y+48, r25	; 0x30
    1a4c:	8f a7       	std	Y+47, r24	; 0x2f
    1a4e:	3f c0       	rjmp	.+126    	; 0x1ace <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1a50:	69 a9       	ldd	r22, Y+49	; 0x31
    1a52:	7a a9       	ldd	r23, Y+50	; 0x32
    1a54:	8b a9       	ldd	r24, Y+51	; 0x33
    1a56:	9c a9       	ldd	r25, Y+52	; 0x34
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	3f ef       	ldi	r19, 0xFF	; 255
    1a5c:	4f e7       	ldi	r20, 0x7F	; 127
    1a5e:	57 e4       	ldi	r21, 0x47	; 71
    1a60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a64:	18 16       	cp	r1, r24
    1a66:	4c f5       	brge	.+82     	; 0x1aba <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a68:	6d a9       	ldd	r22, Y+53	; 0x35
    1a6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1a6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1a6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	51 e4       	ldi	r21, 0x41	; 65
    1a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	98 ab       	std	Y+48, r25	; 0x30
    1a8e:	8f a7       	std	Y+47, r24	; 0x2f
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <LCD_displayCharacter+0xd2>
    1a92:	89 e1       	ldi	r24, 0x19	; 25
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9e a7       	std	Y+46, r25	; 0x2e
    1a98:	8d a7       	std	Y+45, r24	; 0x2d
    1a9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_displayCharacter+0xc0>
    1aa2:	9e a7       	std	Y+46, r25	; 0x2e
    1aa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	98 ab       	std	Y+48, r25	; 0x30
    1aae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	69 f7       	brne	.-38     	; 0x1a92 <LCD_displayCharacter+0xb4>
    1ab8:	14 c0       	rjmp	.+40     	; 0x1ae2 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aba:	69 a9       	ldd	r22, Y+49	; 0x31
    1abc:	7a a9       	ldd	r23, Y+50	; 0x32
    1abe:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	98 ab       	std	Y+48, r25	; 0x30
    1acc:	8f a7       	std	Y+47, r24	; 0x2f
    1ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ad2:	9c a7       	std	Y+44, r25	; 0x2c
    1ad4:	8b a7       	std	Y+43, r24	; 0x2b
    1ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_displayCharacter+0xfc>
    1ade:	9c a7       	std	Y+44, r25	; 0x2c
    1ae0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	65 e0       	ldi	r22, 0x05	; 5
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e8       	ldi	r26, 0x80	; 128
    1af2:	bf e3       	ldi	r27, 0x3F	; 63
    1af4:	8f a3       	std	Y+39, r24	; 0x27
    1af6:	98 a7       	std	Y+40, r25	; 0x28
    1af8:	a9 a7       	std	Y+41, r26	; 0x29
    1afa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	6f a1       	ldd	r22, Y+39	; 0x27
    1afe:	78 a5       	ldd	r23, Y+40	; 0x28
    1b00:	89 a5       	ldd	r24, Y+41	; 0x29
    1b02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a e7       	ldi	r20, 0x7A	; 122
    1b0a:	53 e4       	ldi	r21, 0x43	; 67
    1b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8b a3       	std	Y+35, r24	; 0x23
    1b16:	9c a3       	std	Y+36, r25	; 0x24
    1b18:	ad a3       	std	Y+37, r26	; 0x25
    1b1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b20:	8d a1       	ldd	r24, Y+37	; 0x25
    1b22:	9e a1       	ldd	r25, Y+38	; 0x26
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <LCD_displayCharacter+0x160>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9a a3       	std	Y+34, r25	; 0x22
    1b3a:	89 a3       	std	Y+33, r24	; 0x21
    1b3c:	3f c0       	rjmp	.+126    	; 0x1bbc <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b40:	7c a1       	ldd	r23, Y+36	; 0x24
    1b42:	8d a1       	ldd	r24, Y+37	; 0x25
    1b44:	9e a1       	ldd	r25, Y+38	; 0x26
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	4c f5       	brge	.+82     	; 0x1ba8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	6f a1       	ldd	r22, Y+39	; 0x27
    1b58:	78 a5       	ldd	r23, Y+40	; 0x28
    1b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9a a3       	std	Y+34, r25	; 0x22
    1b7c:	89 a3       	std	Y+33, r24	; 0x21
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <LCD_displayCharacter+0x1c0>
    1b80:	89 e1       	ldi	r24, 0x19	; 25
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	98 a3       	std	Y+32, r25	; 0x20
    1b86:	8f 8f       	std	Y+31, r24	; 0x1f
    1b88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <LCD_displayCharacter+0x1ae>
    1b90:	98 a3       	std	Y+32, r25	; 0x20
    1b92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	89 a1       	ldd	r24, Y+33	; 0x21
    1b96:	9a a1       	ldd	r25, Y+34	; 0x22
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9a a3       	std	Y+34, r25	; 0x22
    1b9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <LCD_displayCharacter+0x1a2>
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    1baa:	7c a1       	ldd	r23, Y+36	; 0x24
    1bac:	8d a1       	ldd	r24, Y+37	; 0x25
    1bae:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9a a3       	std	Y+34, r25	; 0x22
    1bba:	89 a3       	std	Y+33, r24	; 0x21
    1bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    1bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_displayCharacter+0x1ea>
    1bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	69 ad       	ldd	r22, Y+57	; 0x39
    1bd4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <GPIO_writePort>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e8       	ldi	r26, 0x80	; 128
    1bde:	bf e3       	ldi	r27, 0x3F	; 63
    1be0:	89 8f       	std	Y+25, r24	; 0x19
    1be2:	9a 8f       	std	Y+26, r25	; 0x1a
    1be4:	ab 8f       	std	Y+27, r26	; 0x1b
    1be6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be8:	69 8d       	ldd	r22, Y+25	; 0x19
    1bea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	53 e4       	ldi	r21, 0x43	; 67
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	8d 8b       	std	Y+21, r24	; 0x15
    1c02:	9e 8b       	std	Y+22, r25	; 0x16
    1c04:	af 8b       	std	Y+23, r26	; 0x17
    1c06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c08:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9c 8b       	std	Y+20, r25	; 0x14
    1c26:	8b 8b       	std	Y+19, r24	; 0x13
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1c2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c30:	98 8d       	ldd	r25, Y+24	; 0x18
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	69 8d       	ldd	r22, Y+25	; 0x19
    1c44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9c 8b       	std	Y+20, r25	; 0x14
    1c68:	8b 8b       	std	Y+19, r24	; 0x13
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <LCD_displayCharacter+0x2ac>
    1c6c:	89 e1       	ldi	r24, 0x19	; 25
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9a 8b       	std	Y+18, r25	; 0x12
    1c72:	89 8b       	std	Y+17, r24	; 0x11
    1c74:	89 89       	ldd	r24, Y+17	; 0x11
    1c76:	9a 89       	ldd	r25, Y+18	; 0x12
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <LCD_displayCharacter+0x29a>
    1c7c:	9a 8b       	std	Y+18, r25	; 0x12
    1c7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	8b 89       	ldd	r24, Y+19	; 0x13
    1c82:	9c 89       	ldd	r25, Y+20	; 0x14
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <LCD_displayCharacter+0x28e>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	6d 89       	ldd	r22, Y+21	; 0x15
    1c96:	7e 89       	ldd	r23, Y+22	; 0x16
    1c98:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9c 8b       	std	Y+20, r25	; 0x14
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
    1ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    1caa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cac:	98 8b       	std	Y+16, r25	; 0x10
    1cae:	8f 87       	std	Y+15, r24	; 0x0f
    1cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb2:	98 89       	ldd	r25, Y+16	; 0x10
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_displayCharacter+0x2d6>
    1cb8:	98 8b       	std	Y+16, r25	; 0x10
    1cba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cbc:	83 e0       	ldi	r24, 0x03	; 3
    1cbe:	65 e0       	ldi	r22, 0x05	; 5
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 86 06 	call	0xd0c	; 0xd0c <GPIO_writePin>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e8       	ldi	r26, 0x80	; 128
    1ccc:	bf e3       	ldi	r27, 0x3F	; 63
    1cce:	8b 87       	std	Y+11, r24	; 0x0b
    1cd0:	9c 87       	std	Y+12, r25	; 0x0c
    1cd2:	ad 87       	std	Y+13, r26	; 0x0d
    1cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a e7       	ldi	r20, 0x7A	; 122
    1ce4:	53 e4       	ldi	r21, 0x43	; 67
    1ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8f 83       	std	Y+7, r24	; 0x07
    1cf0:	98 87       	std	Y+8, r25	; 0x08
    1cf2:	a9 87       	std	Y+9, r26	; 0x09
    1cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <LCD_displayCharacter+0x39a>
    1d5a:	89 e1       	ldi	r24, 0x19	; 25
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_displayCharacter+0x388>
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <LCD_displayCharacter+0x37c>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_displayCharacter+0x3c4>
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1daa:	e9 96       	adiw	r28, 0x39	; 57
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <LCD_displayString+0x6>
    1dc2:	0f 92       	push	r0
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	9b 83       	std	Y+3, r25	; 0x03
    1dca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dcc:	19 82       	std	Y+1, r1	; 0x01
    1dce:	0e c0       	rjmp	.+28     	; 0x1dec <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dda:	fc 01       	movw	r30, r24
    1ddc:	e2 0f       	add	r30, r18
    1dde:	f3 1f       	adc	r31, r19
    1de0:	80 81       	ld	r24, Z
    1de2:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_displayCharacter>
		i++;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	8f 5f       	subi	r24, 0xFF	; 255
    1dea:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	9b 81       	ldd	r25, Y+3	; 0x03
    1df6:	fc 01       	movw	r30, r24
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 23       	and	r24, r24
    1e00:	39 f7       	brne	.-50     	; 0x1dd0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <LCD_moveCursor+0x6>
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <LCD_moveCursor+0x8>
    1e16:	0f 92       	push	r0
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	8a 83       	std	Y+2, r24	; 0x02
    1e1e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	3d 83       	std	Y+5, r19	; 0x05
    1e28:	2c 83       	std	Y+4, r18	; 0x04
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	91 05       	cpc	r25, r1
    1e32:	c1 f0       	breq	.+48     	; 0x1e64 <LCD_moveCursor+0x56>
    1e34:	2c 81       	ldd	r18, Y+4	; 0x04
    1e36:	3d 81       	ldd	r19, Y+5	; 0x05
    1e38:	22 30       	cpi	r18, 0x02	; 2
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <LCD_moveCursor+0x3a>
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	61 f0       	breq	.+24     	; 0x1e5e <LCD_moveCursor+0x50>
    1e46:	19 c0       	rjmp	.+50     	; 0x1e7a <LCD_moveCursor+0x6c>
    1e48:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e4c:	22 30       	cpi	r18, 0x02	; 2
    1e4e:	31 05       	cpc	r19, r1
    1e50:	69 f0       	breq	.+26     	; 0x1e6c <LCD_moveCursor+0x5e>
    1e52:	8c 81       	ldd	r24, Y+4	; 0x04
    1e54:	9d 81       	ldd	r25, Y+5	; 0x05
    1e56:	83 30       	cpi	r24, 0x03	; 3
    1e58:	91 05       	cpc	r25, r1
    1e5a:	61 f0       	breq	.+24     	; 0x1e74 <LCD_moveCursor+0x66>
    1e5c:	0e c0       	rjmp	.+28     	; 0x1e7a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	0b c0       	rjmp	.+22     	; 0x1e7a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	80 5c       	subi	r24, 0xC0	; 192
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	07 c0       	rjmp	.+14     	; 0x1e7a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	80 5f       	subi	r24, 0xF0	; 240
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	03 c0       	rjmp	.+6      	; 0x1e7a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	80 5b       	subi	r24, 0xB0	; 176
    1e78:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	80 68       	ori	r24, 0x80	; 128
    1e7e:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <LCD_displayStringRowColumn+0x6>
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <LCD_displayStringRowColumn+0x8>
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	6a 83       	std	Y+2, r22	; 0x02
    1ea2:	5c 83       	std	Y+4, r21	; 0x04
    1ea4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	6a 81       	ldd	r22, Y+2	; 0x02
    1eaa:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <LCD_displayString>
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	62 97       	sbiw	r28, 0x12	; 18
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	9a 8b       	std	Y+18, r25	; 0x12
    1eda:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee0:	9e 01       	movw	r18, r28
    1ee2:	2f 5f       	subi	r18, 0xFF	; 255
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	b9 01       	movw	r22, r18
    1ee8:	4a e0       	ldi	r20, 0x0A	; 10
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <itoa>
   LCD_displayString(buff); /* Display the string */
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <LCD_displayString>
}
    1ef8:	62 96       	adiw	r28, 0x12	; 18
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	0e 94 00 0b 	call	0x1600	; 0x1600 <LCD_sendCommand>
}
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <Calc_app>:
#include "lcd.h"
#include "std_types.h"
#include <util/delay.h>

void Calc_app()
{
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	c0 58       	subi	r28, 0x80	; 128
    1f2c:	d0 40       	sbci	r29, 0x00	; 0
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    // Initialize variables
    uint8 arr[3] = {'U', 'U', 'U'};
    1f38:	ce 01       	movw	r24, r28
    1f3a:	8f 58       	subi	r24, 0x8F	; 143
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	e9 96       	adiw	r28, 0x39	; 57
    1f40:	9f af       	std	Y+63, r25	; 0x3f
    1f42:	8e af       	std	Y+62, r24	; 0x3e
    1f44:	e9 97       	sbiw	r28, 0x39	; 57
    1f46:	6b e6       	ldi	r22, 0x6B	; 107
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	eb 96       	adiw	r28, 0x3b	; 59
    1f4c:	7f af       	std	Y+63, r23	; 0x3f
    1f4e:	6e af       	std	Y+62, r22	; 0x3e
    1f50:	eb 97       	sbiw	r28, 0x3b	; 59
    1f52:	73 e0       	ldi	r23, 0x03	; 3
    1f54:	ec 96       	adiw	r28, 0x3c	; 60
    1f56:	7f af       	std	Y+63, r23	; 0x3f
    1f58:	ec 97       	sbiw	r28, 0x3c	; 60
    1f5a:	eb 96       	adiw	r28, 0x3b	; 59
    1f5c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f5e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f60:	eb 97       	sbiw	r28, 0x3b	; 59
    1f62:	00 80       	ld	r0, Z
    1f64:	eb 96       	adiw	r28, 0x3b	; 59
    1f66:	6e ad       	ldd	r22, Y+62	; 0x3e
    1f68:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f6a:	eb 97       	sbiw	r28, 0x3b	; 59
    1f6c:	6f 5f       	subi	r22, 0xFF	; 255
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	eb 96       	adiw	r28, 0x3b	; 59
    1f72:	7f af       	std	Y+63, r23	; 0x3f
    1f74:	6e af       	std	Y+62, r22	; 0x3e
    1f76:	eb 97       	sbiw	r28, 0x3b	; 59
    1f78:	e9 96       	adiw	r28, 0x39	; 57
    1f7a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f7c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f7e:	e9 97       	sbiw	r28, 0x39	; 57
    1f80:	00 82       	st	Z, r0
    1f82:	e9 96       	adiw	r28, 0x39	; 57
    1f84:	6e ad       	ldd	r22, Y+62	; 0x3e
    1f86:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f88:	e9 97       	sbiw	r28, 0x39	; 57
    1f8a:	6f 5f       	subi	r22, 0xFF	; 255
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	e9 96       	adiw	r28, 0x39	; 57
    1f90:	7f af       	std	Y+63, r23	; 0x3f
    1f92:	6e af       	std	Y+62, r22	; 0x3e
    1f94:	e9 97       	sbiw	r28, 0x39	; 57
    1f96:	ec 96       	adiw	r28, 0x3c	; 60
    1f98:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f9a:	ec 97       	sbiw	r28, 0x3c	; 60
    1f9c:	71 50       	subi	r23, 0x01	; 1
    1f9e:	ec 96       	adiw	r28, 0x3c	; 60
    1fa0:	7f af       	std	Y+63, r23	; 0x3f
    1fa2:	ec 97       	sbiw	r28, 0x3c	; 60
    1fa4:	ec 96       	adiw	r28, 0x3c	; 60
    1fa6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fa8:	ec 97       	sbiw	r28, 0x3c	; 60
    1faa:	88 23       	and	r24, r24
    1fac:	b1 f6       	brne	.-84     	; 0x1f5a <Calc_app+0x3c>
    uint8 arr2[3] = {'U', 'U', 'U'};
    1fae:	ce 01       	movw	r24, r28
    1fb0:	8c 58       	subi	r24, 0x8C	; 140
    1fb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb4:	ee 96       	adiw	r28, 0x3e	; 62
    1fb6:	9f af       	std	Y+63, r25	; 0x3f
    1fb8:	8e af       	std	Y+62, r24	; 0x3e
    1fba:	ee 97       	sbiw	r28, 0x3e	; 62
    1fbc:	e8 e6       	ldi	r30, 0x68	; 104
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	c2 58       	subi	r28, 0x82	; 130
    1fc2:	df 4f       	sbci	r29, 0xFF	; 255
    1fc4:	f9 83       	std	Y+1, r31	; 0x01
    1fc6:	e8 83       	st	Y, r30
    1fc8:	ce 57       	subi	r28, 0x7E	; 126
    1fca:	d0 40       	sbci	r29, 0x00	; 0
    1fcc:	f3 e0       	ldi	r31, 0x03	; 3
    1fce:	c0 58       	subi	r28, 0x80	; 128
    1fd0:	df 4f       	sbci	r29, 0xFF	; 255
    1fd2:	f8 83       	st	Y, r31
    1fd4:	c0 58       	subi	r28, 0x80	; 128
    1fd6:	d0 40       	sbci	r29, 0x00	; 0
    1fd8:	c2 58       	subi	r28, 0x82	; 130
    1fda:	df 4f       	sbci	r29, 0xFF	; 255
    1fdc:	e8 81       	ld	r30, Y
    1fde:	f9 81       	ldd	r31, Y+1	; 0x01
    1fe0:	ce 57       	subi	r28, 0x7E	; 126
    1fe2:	d0 40       	sbci	r29, 0x00	; 0
    1fe4:	00 80       	ld	r0, Z
    1fe6:	c2 58       	subi	r28, 0x82	; 130
    1fe8:	df 4f       	sbci	r29, 0xFF	; 255
    1fea:	68 81       	ld	r22, Y
    1fec:	79 81       	ldd	r23, Y+1	; 0x01
    1fee:	ce 57       	subi	r28, 0x7E	; 126
    1ff0:	d0 40       	sbci	r29, 0x00	; 0
    1ff2:	6f 5f       	subi	r22, 0xFF	; 255
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff6:	c2 58       	subi	r28, 0x82	; 130
    1ff8:	df 4f       	sbci	r29, 0xFF	; 255
    1ffa:	79 83       	std	Y+1, r23	; 0x01
    1ffc:	68 83       	st	Y, r22
    1ffe:	ce 57       	subi	r28, 0x7E	; 126
    2000:	d0 40       	sbci	r29, 0x00	; 0
    2002:	ee 96       	adiw	r28, 0x3e	; 62
    2004:	ee ad       	ldd	r30, Y+62	; 0x3e
    2006:	ff ad       	ldd	r31, Y+63	; 0x3f
    2008:	ee 97       	sbiw	r28, 0x3e	; 62
    200a:	00 82       	st	Z, r0
    200c:	ee 96       	adiw	r28, 0x3e	; 62
    200e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2010:	7f ad       	ldd	r23, Y+63	; 0x3f
    2012:	ee 97       	sbiw	r28, 0x3e	; 62
    2014:	6f 5f       	subi	r22, 0xFF	; 255
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	ee 96       	adiw	r28, 0x3e	; 62
    201a:	7f af       	std	Y+63, r23	; 0x3f
    201c:	6e af       	std	Y+62, r22	; 0x3e
    201e:	ee 97       	sbiw	r28, 0x3e	; 62
    2020:	c0 58       	subi	r28, 0x80	; 128
    2022:	df 4f       	sbci	r29, 0xFF	; 255
    2024:	78 81       	ld	r23, Y
    2026:	c0 58       	subi	r28, 0x80	; 128
    2028:	d0 40       	sbci	r29, 0x00	; 0
    202a:	71 50       	subi	r23, 0x01	; 1
    202c:	c0 58       	subi	r28, 0x80	; 128
    202e:	df 4f       	sbci	r29, 0xFF	; 255
    2030:	78 83       	st	Y, r23
    2032:	c0 58       	subi	r28, 0x80	; 128
    2034:	d0 40       	sbci	r29, 0x00	; 0
    2036:	c0 58       	subi	r28, 0x80	; 128
    2038:	df 4f       	sbci	r29, 0xFF	; 255
    203a:	88 81       	ld	r24, Y
    203c:	c0 58       	subi	r28, 0x80	; 128
    203e:	d0 40       	sbci	r29, 0x00	; 0
    2040:	88 23       	and	r24, r24
    2042:	51 f6       	brne	.-108    	; 0x1fd8 <Calc_app+0xba>
    uint16 num1;
    uint16 num2;
    uint8 operator = 'U';
    2044:	fe 01       	movw	r30, r28
    2046:	e4 59       	subi	r30, 0x94	; 148
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	85 e5       	ldi	r24, 0x55	; 85
    204c:	80 83       	st	Z, r24
    uint8 equal = 'U';
    204e:	fe 01       	movw	r30, r28
    2050:	e5 59       	subi	r30, 0x95	; 149
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	85 e5       	ldi	r24, 0x55	; 85
    2056:	80 83       	st	Z, r24
    uint16 result;

    // Get the first number from the user
    for (int i = 0; i < 3; i++)
    2058:	fe 01       	movw	r30, r28
    205a:	e9 59       	subi	r30, 0x99	; 153
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	11 82       	std	Z+1, r1	; 0x01
    2060:	10 82       	st	Z, r1
    2062:	b2 c1       	rjmp	.+868    	; 0x23c8 <Calc_app+0x4aa>
    {
        uint8 temp = KEYPAD_getPressedKey();
    2064:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <KEYPAD_getPressedKey>
    2068:	fe 01       	movw	r30, r28
    206a:	ea 59       	subi	r30, 0x9A	; 154
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 83       	st	Z, r24
    2070:	fe 01       	movw	r30, r28
    2072:	e1 5a       	subi	r30, 0xA1	; 161
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a8 e4       	ldi	r26, 0x48	; 72
    207c:	b3 e4       	ldi	r27, 0x43	; 67
    207e:	80 83       	st	Z, r24
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	a2 83       	std	Z+2, r26	; 0x02
    2084:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2086:	8e 01       	movw	r16, r28
    2088:	05 5a       	subi	r16, 0xA5	; 165
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	e1 5a       	subi	r30, 0xA1	; 161
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	53 e4       	ldi	r21, 0x43	; 67
    20a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	f8 01       	movw	r30, r16
    20ac:	80 83       	st	Z, r24
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	a2 83       	std	Z+2, r26	; 0x02
    20b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20b4:	fe 01       	movw	r30, r28
    20b6:	e5 5a       	subi	r30, 0xA5	; 165
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e8       	ldi	r20, 0x80	; 128
    20c8:	5f e3       	ldi	r21, 0x3F	; 63
    20ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20ce:	88 23       	and	r24, r24
    20d0:	44 f4       	brge	.+16     	; 0x20e2 <Calc_app+0x1c4>
		__ticks = 1;
    20d2:	fe 01       	movw	r30, r28
    20d4:	e7 5a       	subi	r30, 0xA7	; 167
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
    20e0:	64 c0       	rjmp	.+200    	; 0x21aa <Calc_app+0x28c>
	else if (__tmp > 65535)
    20e2:	fe 01       	movw	r30, r28
    20e4:	e5 5a       	subi	r30, 0xA5	; 165
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	60 81       	ld	r22, Z
    20ea:	71 81       	ldd	r23, Z+1	; 0x01
    20ec:	82 81       	ldd	r24, Z+2	; 0x02
    20ee:	93 81       	ldd	r25, Z+3	; 0x03
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	0c f0       	brlt	.+2      	; 0x2102 <Calc_app+0x1e4>
    2100:	43 c0       	rjmp	.+134    	; 0x2188 <Calc_app+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2102:	fe 01       	movw	r30, r28
    2104:	e1 5a       	subi	r30, 0xA1	; 161
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e2       	ldi	r20, 0x20	; 32
    2116:	51 e4       	ldi	r21, 0x41	; 65
    2118:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8e 01       	movw	r16, r28
    2122:	07 5a       	subi	r16, 0xA7	; 167
    2124:	1f 4f       	sbci	r17, 0xFF	; 255
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	f8 01       	movw	r30, r16
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
    2138:	1f c0       	rjmp	.+62     	; 0x2178 <Calc_app+0x25a>
    213a:	fe 01       	movw	r30, r28
    213c:	e9 5a       	subi	r30, 0xA9	; 169
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	89 e1       	ldi	r24, 0x19	; 25
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	80 83       	st	Z, r24
    2148:	fe 01       	movw	r30, r28
    214a:	e9 5a       	subi	r30, 0xA9	; 169
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 81       	ld	r24, Z
    2150:	91 81       	ldd	r25, Z+1	; 0x01
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <Calc_app+0x234>
    2156:	fe 01       	movw	r30, r28
    2158:	e9 5a       	subi	r30, 0xA9	; 169
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	91 83       	std	Z+1, r25	; 0x01
    215e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2160:	de 01       	movw	r26, r28
    2162:	a7 5a       	subi	r26, 0xA7	; 167
    2164:	bf 4f       	sbci	r27, 0xFF	; 255
    2166:	fe 01       	movw	r30, r28
    2168:	e7 5a       	subi	r30, 0xA7	; 167
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	11 96       	adiw	r26, 0x01	; 1
    2174:	9c 93       	st	X, r25
    2176:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2178:	fe 01       	movw	r30, r28
    217a:	e7 5a       	subi	r30, 0xA7	; 167
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	d1 f6       	brne	.-76     	; 0x213a <Calc_app+0x21c>
    2186:	28 c0       	rjmp	.+80     	; 0x21d8 <Calc_app+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2188:	8e 01       	movw	r16, r28
    218a:	07 5a       	subi	r16, 0xA7	; 167
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	fe 01       	movw	r30, r28
    2190:	e5 5a       	subi	r30, 0xA5	; 165
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	f8 01       	movw	r30, r16
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
    21aa:	de 01       	movw	r26, r28
    21ac:	ab 5a       	subi	r26, 0xAB	; 171
    21ae:	bf 4f       	sbci	r27, 0xFF	; 255
    21b0:	fe 01       	movw	r30, r28
    21b2:	e7 5a       	subi	r30, 0xA7	; 167
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	80 81       	ld	r24, Z
    21b8:	91 81       	ldd	r25, Z+1	; 0x01
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	9c 93       	st	X, r25
    21be:	8e 93       	st	-X, r24
    21c0:	fe 01       	movw	r30, r28
    21c2:	eb 5a       	subi	r30, 0xAB	; 171
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <Calc_app+0x2ac>
    21ce:	fe 01       	movw	r30, r28
    21d0:	eb 5a       	subi	r30, 0xAB	; 171
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
        _delay_ms(200);

        // Check if the pressed key is an operator (+, -, *, or /)
        if (temp == 37 || temp == 45 || temp == 42 || temp == 43)
    21d8:	fe 01       	movw	r30, r28
    21da:	ea 59       	subi	r30, 0x9A	; 154
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	85 32       	cpi	r24, 0x25	; 37
    21e2:	91 f0       	breq	.+36     	; 0x2208 <Calc_app+0x2ea>
    21e4:	fe 01       	movw	r30, r28
    21e6:	ea 59       	subi	r30, 0x9A	; 154
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	8d 32       	cpi	r24, 0x2D	; 45
    21ee:	61 f0       	breq	.+24     	; 0x2208 <Calc_app+0x2ea>
    21f0:	fe 01       	movw	r30, r28
    21f2:	ea 59       	subi	r30, 0x9A	; 154
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	80 81       	ld	r24, Z
    21f8:	8a 32       	cpi	r24, 0x2A	; 42
    21fa:	31 f0       	breq	.+12     	; 0x2208 <Calc_app+0x2ea>
    21fc:	fe 01       	movw	r30, r28
    21fe:	ea 59       	subi	r30, 0x9A	; 154
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	80 81       	ld	r24, Z
    2204:	8b 32       	cpi	r24, 0x2B	; 43
    2206:	49 f4       	brne	.+18     	; 0x221a <Calc_app+0x2fc>
        {
            operator = temp;
    2208:	fe 01       	movw	r30, r28
    220a:	e4 59       	subi	r30, 0x94	; 148
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	de 01       	movw	r26, r28
    2210:	aa 59       	subi	r26, 0x9A	; 154
    2212:	bf 4f       	sbci	r27, 0xFF	; 255
    2214:	8c 91       	ld	r24, X
    2216:	80 83       	st	Z, r24
    2218:	e0 c0       	rjmp	.+448    	; 0x23da <Calc_app+0x4bc>
            break;
        }

        arr[i] = temp;
    221a:	fe 01       	movw	r30, r28
    221c:	e9 59       	subi	r30, 0x99	; 153
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	20 81       	ld	r18, Z
    2222:	31 81       	ldd	r19, Z+1	; 0x01
    2224:	ce 01       	movw	r24, r28
    2226:	8f 58       	subi	r24, 0x8F	; 143
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	dc 01       	movw	r26, r24
    222c:	a2 0f       	add	r26, r18
    222e:	b3 1f       	adc	r27, r19
    2230:	fe 01       	movw	r30, r28
    2232:	ea 59       	subi	r30, 0x9A	; 154
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	8c 93       	st	X, r24
        LCD_intgerToString(temp);
    223a:	fe 01       	movw	r30, r28
    223c:	ea 59       	subi	r30, 0x9A	; 154
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_intgerToString>
    224a:	fe 01       	movw	r30, r28
    224c:	ef 5a       	subi	r30, 0xAF	; 175
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a8 e4       	ldi	r26, 0x48	; 72
    2256:	b3 e4       	ldi	r27, 0x43	; 67
    2258:	80 83       	st	Z, r24
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	a2 83       	std	Z+2, r26	; 0x02
    225e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2260:	8e 01       	movw	r16, r28
    2262:	03 5b       	subi	r16, 0xB3	; 179
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	fe 01       	movw	r30, r28
    2268:	ef 5a       	subi	r30, 0xAF	; 175
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
    2270:	82 81       	ldd	r24, Z+2	; 0x02
    2272:	93 81       	ldd	r25, Z+3	; 0x03
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	53 e4       	ldi	r21, 0x43	; 67
    227c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	f8 01       	movw	r30, r16
    2286:	80 83       	st	Z, r24
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	a2 83       	std	Z+2, r26	; 0x02
    228c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    228e:	fe 01       	movw	r30, r28
    2290:	e3 5b       	subi	r30, 0xB3	; 179
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	60 81       	ld	r22, Z
    2296:	71 81       	ldd	r23, Z+1	; 0x01
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	44 f4       	brge	.+16     	; 0x22bc <Calc_app+0x39e>
		__ticks = 1;
    22ac:	fe 01       	movw	r30, r28
    22ae:	e5 5b       	subi	r30, 0xB5	; 181
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
    22ba:	64 c0       	rjmp	.+200    	; 0x2384 <Calc_app+0x466>
	else if (__tmp > 65535)
    22bc:	fe 01       	movw	r30, r28
    22be:	e3 5b       	subi	r30, 0xB3	; 179
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	0c f0       	brlt	.+2      	; 0x22dc <Calc_app+0x3be>
    22da:	43 c0       	rjmp	.+134    	; 0x2362 <Calc_app+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22dc:	fe 01       	movw	r30, r28
    22de:	ef 5a       	subi	r30, 0xAF	; 175
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	60 81       	ld	r22, Z
    22e4:	71 81       	ldd	r23, Z+1	; 0x01
    22e6:	82 81       	ldd	r24, Z+2	; 0x02
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e2       	ldi	r20, 0x20	; 32
    22f0:	51 e4       	ldi	r21, 0x41	; 65
    22f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	8e 01       	movw	r16, r28
    22fc:	05 5b       	subi	r16, 0xB5	; 181
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	f8 01       	movw	r30, r16
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	80 83       	st	Z, r24
    2312:	1f c0       	rjmp	.+62     	; 0x2352 <Calc_app+0x434>
    2314:	fe 01       	movw	r30, r28
    2316:	e7 5b       	subi	r30, 0xB7	; 183
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	89 e1       	ldi	r24, 0x19	; 25
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    2322:	fe 01       	movw	r30, r28
    2324:	e7 5b       	subi	r30, 0xB7	; 183
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 81       	ld	r24, Z
    232a:	91 81       	ldd	r25, Z+1	; 0x01
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <Calc_app+0x40e>
    2330:	fe 01       	movw	r30, r28
    2332:	e7 5b       	subi	r30, 0xB7	; 183
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233a:	de 01       	movw	r26, r28
    233c:	a5 5b       	subi	r26, 0xB5	; 181
    233e:	bf 4f       	sbci	r27, 0xFF	; 255
    2340:	fe 01       	movw	r30, r28
    2342:	e5 5b       	subi	r30, 0xB5	; 181
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	80 81       	ld	r24, Z
    2348:	91 81       	ldd	r25, Z+1	; 0x01
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	9c 93       	st	X, r25
    2350:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2352:	fe 01       	movw	r30, r28
    2354:	e5 5b       	subi	r30, 0xB5	; 181
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	80 81       	ld	r24, Z
    235a:	91 81       	ldd	r25, Z+1	; 0x01
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	d1 f6       	brne	.-76     	; 0x2314 <Calc_app+0x3f6>
    2360:	27 c0       	rjmp	.+78     	; 0x23b0 <Calc_app+0x492>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	8e 01       	movw	r16, r28
    2364:	05 5b       	subi	r16, 0xB5	; 181
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	fe 01       	movw	r30, r28
    236a:	e3 5b       	subi	r30, 0xB3	; 179
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	f8 01       	movw	r30, r16
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	80 83       	st	Z, r24
    2384:	de 01       	movw	r26, r28
    2386:	a9 5b       	subi	r26, 0xB9	; 185
    2388:	bf 4f       	sbci	r27, 0xFF	; 255
    238a:	fe 01       	movw	r30, r28
    238c:	e5 5b       	subi	r30, 0xB5	; 181
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	8d 93       	st	X+, r24
    2396:	9c 93       	st	X, r25
    2398:	fe 01       	movw	r30, r28
    239a:	e9 5b       	subi	r30, 0xB9	; 185
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <Calc_app+0x484>
    23a6:	fe 01       	movw	r30, r28
    23a8:	e9 5b       	subi	r30, 0xB9	; 185
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	80 83       	st	Z, r24
    uint8 operator = 'U';
    uint8 equal = 'U';
    uint16 result;

    // Get the first number from the user
    for (int i = 0; i < 3; i++)
    23b0:	de 01       	movw	r26, r28
    23b2:	a9 59       	subi	r26, 0x99	; 153
    23b4:	bf 4f       	sbci	r27, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	e9 59       	subi	r30, 0x99	; 153
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	11 96       	adiw	r26, 0x01	; 1
    23c4:	9c 93       	st	X, r25
    23c6:	8e 93       	st	-X, r24
    23c8:	fe 01       	movw	r30, r28
    23ca:	e9 59       	subi	r30, 0x99	; 153
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	80 81       	ld	r24, Z
    23d0:	91 81       	ldd	r25, Z+1	; 0x01
    23d2:	83 30       	cpi	r24, 0x03	; 3
    23d4:	91 05       	cpc	r25, r1
    23d6:	0c f4       	brge	.+2      	; 0x23da <Calc_app+0x4bc>
    23d8:	45 ce       	rjmp	.-886    	; 0x2064 <Calc_app+0x146>
        LCD_intgerToString(temp);
        _delay_ms(200);
    }

    // Convert the first number from an array of digits to a single number
    if (arr[0] == 'U' && arr[1] == 'U' && arr[2] == 'U')
    23da:	fe 01       	movw	r30, r28
    23dc:	ef 58       	subi	r30, 0x8F	; 143
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	85 35       	cpi	r24, 0x55	; 85
    23e4:	91 f4       	brne	.+36     	; 0x240a <Calc_app+0x4ec>
    23e6:	fe 01       	movw	r30, r28
    23e8:	ef 58       	subi	r30, 0x8F	; 143
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	81 81       	ldd	r24, Z+1	; 0x01
    23ee:	85 35       	cpi	r24, 0x55	; 85
    23f0:	61 f4       	brne	.+24     	; 0x240a <Calc_app+0x4ec>
    23f2:	fe 01       	movw	r30, r28
    23f4:	ef 58       	subi	r30, 0x8F	; 143
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	85 35       	cpi	r24, 0x55	; 85
    23fc:	31 f4       	brne	.+12     	; 0x240a <Calc_app+0x4ec>
    {
        num1 = 0;
    23fe:	fe 01       	movw	r30, r28
    2400:	e1 59       	subi	r30, 0x91	; 145
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	11 82       	std	Z+1, r1	; 0x01
    2406:	10 82       	st	Z, r1
    2408:	6b c0       	rjmp	.+214    	; 0x24e0 <Calc_app+0x5c2>
    }
    else if (arr[1] == 'U' && arr[2] == 'U')
    240a:	fe 01       	movw	r30, r28
    240c:	ef 58       	subi	r30, 0x8F	; 143
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	81 81       	ldd	r24, Z+1	; 0x01
    2412:	85 35       	cpi	r24, 0x55	; 85
    2414:	91 f4       	brne	.+36     	; 0x243a <Calc_app+0x51c>
    2416:	fe 01       	movw	r30, r28
    2418:	ef 58       	subi	r30, 0x8F	; 143
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	85 35       	cpi	r24, 0x55	; 85
    2420:	61 f4       	brne	.+24     	; 0x243a <Calc_app+0x51c>
    {
        num1 = arr[0];
    2422:	fe 01       	movw	r30, r28
    2424:	ef 58       	subi	r30, 0x8F	; 143
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	fe 01       	movw	r30, r28
    242c:	e1 59       	subi	r30, 0x91	; 145
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
    2438:	53 c0       	rjmp	.+166    	; 0x24e0 <Calc_app+0x5c2>
    }
    else if (arr[2] == 'U')
    243a:	fe 01       	movw	r30, r28
    243c:	ef 58       	subi	r30, 0x8F	; 143
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	85 35       	cpi	r24, 0x55	; 85
    2444:	f1 f4       	brne	.+60     	; 0x2482 <Calc_app+0x564>
    {
        num1 = (arr[0] * 10) + arr[1];
    2446:	fe 01       	movw	r30, r28
    2448:	ef 58       	subi	r30, 0x8F	; 143
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 81       	ld	r24, Z
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9c 01       	movw	r18, r24
    2454:	22 0f       	add	r18, r18
    2456:	33 1f       	adc	r19, r19
    2458:	c9 01       	movw	r24, r18
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	28 0f       	add	r18, r24
    2464:	39 1f       	adc	r19, r25
    2466:	fe 01       	movw	r30, r28
    2468:	ef 58       	subi	r30, 0x8F	; 143
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	81 81       	ldd	r24, Z+1	; 0x01
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	82 0f       	add	r24, r18
    2474:	93 1f       	adc	r25, r19
    2476:	fe 01       	movw	r30, r28
    2478:	e1 59       	subi	r30, 0x91	; 145
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	80 83       	st	Z, r24
    2480:	2f c0       	rjmp	.+94     	; 0x24e0 <Calc_app+0x5c2>
    }
    else
    {
        num1 = (arr[0] * 100) + (arr[1] * 10) + arr[2];
    2482:	fe 01       	movw	r30, r28
    2484:	ef 58       	subi	r30, 0x8F	; 143
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	84 e6       	ldi	r24, 0x64	; 100
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	28 9f       	mul	r18, r24
    2494:	a0 01       	movw	r20, r0
    2496:	29 9f       	mul	r18, r25
    2498:	50 0d       	add	r21, r0
    249a:	38 9f       	mul	r19, r24
    249c:	50 0d       	add	r21, r0
    249e:	11 24       	eor	r1, r1
    24a0:	fe 01       	movw	r30, r28
    24a2:	ef 58       	subi	r30, 0x8F	; 143
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	81 81       	ldd	r24, Z+1	; 0x01
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9c 01       	movw	r18, r24
    24ae:	22 0f       	add	r18, r18
    24b0:	33 1f       	adc	r19, r19
    24b2:	c9 01       	movw	r24, r18
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	82 0f       	add	r24, r18
    24be:	93 1f       	adc	r25, r19
    24c0:	9a 01       	movw	r18, r20
    24c2:	28 0f       	add	r18, r24
    24c4:	39 1f       	adc	r19, r25
    24c6:	fe 01       	movw	r30, r28
    24c8:	ef 58       	subi	r30, 0x8F	; 143
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	82 0f       	add	r24, r18
    24d4:	93 1f       	adc	r25, r19
    24d6:	fe 01       	movw	r30, r28
    24d8:	e1 59       	subi	r30, 0x91	; 145
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    }

    // Get the operator from the user
    if (operator == 'U')
    24e0:	fe 01       	movw	r30, r28
    24e2:	e4 59       	subi	r30, 0x94	; 148
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	85 35       	cpi	r24, 0x55	; 85
    24ea:	31 f4       	brne	.+12     	; 0x24f8 <Calc_app+0x5da>
    {
        operator = KEYPAD_getPressedKey();
    24ec:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <KEYPAD_getPressedKey>
    24f0:	fe 01       	movw	r30, r28
    24f2:	e4 59       	subi	r30, 0x94	; 148
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	80 83       	st	Z, r24
    }

    LCD_displayCharacter(operator);
    24f8:	fe 01       	movw	r30, r28
    24fa:	e4 59       	subi	r30, 0x94	; 148
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_displayCharacter>
    2504:	fe 01       	movw	r30, r28
    2506:	ed 5b       	subi	r30, 0xBD	; 189
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a8 e4       	ldi	r26, 0x48	; 72
    2510:	b3 e4       	ldi	r27, 0x43	; 67
    2512:	80 83       	st	Z, r24
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	a2 83       	std	Z+2, r26	; 0x02
    2518:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	8e 01       	movw	r16, r28
    251c:	01 5c       	subi	r16, 0xC1	; 193
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	fe 01       	movw	r30, r28
    2522:	ed 5b       	subi	r30, 0xBD	; 189
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a e7       	ldi	r20, 0x7A	; 122
    2534:	53 e4       	ldi	r21, 0x43	; 67
    2536:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	f8 01       	movw	r30, r16
    2540:	80 83       	st	Z, r24
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	a2 83       	std	Z+2, r26	; 0x02
    2546:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2548:	fe 01       	movw	r30, r28
    254a:	ff 96       	adiw	r30, 0x3f	; 63
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <Calc_app+0x650>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9e af       	std	Y+62, r25	; 0x3e
    256a:	8d af       	std	Y+61, r24	; 0x3d
    256c:	46 c0       	rjmp	.+140    	; 0x25fa <Calc_app+0x6dc>
	else if (__tmp > 65535)
    256e:	fe 01       	movw	r30, r28
    2570:	ff 96       	adiw	r30, 0x3f	; 63
    2572:	60 81       	ld	r22, Z
    2574:	71 81       	ldd	r23, Z+1	; 0x01
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	3f ef       	ldi	r19, 0xFF	; 255
    257e:	4f e7       	ldi	r20, 0x7F	; 127
    2580:	57 e4       	ldi	r21, 0x47	; 71
    2582:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2586:	18 16       	cp	r1, r24
    2588:	64 f5       	brge	.+88     	; 0x25e2 <Calc_app+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258a:	fe 01       	movw	r30, r28
    258c:	ed 5b       	subi	r30, 0xBD	; 189
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9e af       	std	Y+62, r25	; 0x3e
    25b6:	8d af       	std	Y+61, r24	; 0x3d
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <Calc_app+0x6ba>
    25ba:	89 e1       	ldi	r24, 0x19	; 25
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	9c af       	std	Y+60, r25	; 0x3c
    25c0:	8b af       	std	Y+59, r24	; 0x3b
    25c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    25c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <Calc_app+0x6a8>
    25ca:	9c af       	std	Y+60, r25	; 0x3c
    25cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9e af       	std	Y+62, r25	; 0x3e
    25d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    25da:	9e ad       	ldd	r25, Y+62	; 0x3e
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <Calc_app+0x69c>
    25e0:	16 c0       	rjmp	.+44     	; 0x260e <Calc_app+0x6f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	fe 01       	movw	r30, r28
    25e4:	ff 96       	adiw	r30, 0x3f	; 63
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9e af       	std	Y+62, r25	; 0x3e
    25f8:	8d af       	std	Y+61, r24	; 0x3d
    25fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    25fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    25fe:	9a af       	std	Y+58, r25	; 0x3a
    2600:	89 af       	std	Y+57, r24	; 0x39
    2602:	89 ad       	ldd	r24, Y+57	; 0x39
    2604:	9a ad       	ldd	r25, Y+58	; 0x3a
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <Calc_app+0x6e8>
    260a:	9a af       	std	Y+58, r25	; 0x3a
    260c:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(200);

    // Get the second number from the user
    for (int i = 0; i < 3; i++)
    260e:	fe 01       	movw	r30, r28
    2610:	ec 59       	subi	r30, 0x9C	; 156
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	11 82       	std	Z+1, r1	; 0x01
    2616:	10 82       	st	Z, r1
    2618:	1d c1       	rjmp	.+570    	; 0x2854 <Calc_app+0x936>
    {
        uint8 temp = KEYPAD_getPressedKey();
    261a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <KEYPAD_getPressedKey>
    261e:	fe 01       	movw	r30, r28
    2620:	ed 59       	subi	r30, 0x9D	; 157
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 83       	st	Z, r24
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a8 e4       	ldi	r26, 0x48	; 72
    262c:	b3 e4       	ldi	r27, 0x43	; 67
    262e:	8d ab       	std	Y+53, r24	; 0x35
    2630:	9e ab       	std	Y+54, r25	; 0x36
    2632:	af ab       	std	Y+55, r26	; 0x37
    2634:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2636:	6d a9       	ldd	r22, Y+53	; 0x35
    2638:	7e a9       	ldd	r23, Y+54	; 0x36
    263a:	8f a9       	ldd	r24, Y+55	; 0x37
    263c:	98 ad       	ldd	r25, Y+56	; 0x38
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	4a e7       	ldi	r20, 0x7A	; 122
    2644:	53 e4       	ldi	r21, 0x43	; 67
    2646:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	89 ab       	std	Y+49, r24	; 0x31
    2650:	9a ab       	std	Y+50, r25	; 0x32
    2652:	ab ab       	std	Y+51, r26	; 0x33
    2654:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2656:	69 a9       	ldd	r22, Y+49	; 0x31
    2658:	7a a9       	ldd	r23, Y+50	; 0x32
    265a:	8b a9       	ldd	r24, Y+51	; 0x33
    265c:	9c a9       	ldd	r25, Y+52	; 0x34
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e8       	ldi	r20, 0x80	; 128
    2664:	5f e3       	ldi	r21, 0x3F	; 63
    2666:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    266a:	88 23       	and	r24, r24
    266c:	2c f4       	brge	.+10     	; 0x2678 <Calc_app+0x75a>
		__ticks = 1;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	98 ab       	std	Y+48, r25	; 0x30
    2674:	8f a7       	std	Y+47, r24	; 0x2f
    2676:	3f c0       	rjmp	.+126    	; 0x26f6 <Calc_app+0x7d8>
	else if (__tmp > 65535)
    2678:	69 a9       	ldd	r22, Y+49	; 0x31
    267a:	7a a9       	ldd	r23, Y+50	; 0x32
    267c:	8b a9       	ldd	r24, Y+51	; 0x33
    267e:	9c a9       	ldd	r25, Y+52	; 0x34
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	3f ef       	ldi	r19, 0xFF	; 255
    2684:	4f e7       	ldi	r20, 0x7F	; 127
    2686:	57 e4       	ldi	r21, 0x47	; 71
    2688:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    268c:	18 16       	cp	r1, r24
    268e:	4c f5       	brge	.+82     	; 0x26e2 <Calc_app+0x7c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2690:	6d a9       	ldd	r22, Y+53	; 0x35
    2692:	7e a9       	ldd	r23, Y+54	; 0x36
    2694:	8f a9       	ldd	r24, Y+55	; 0x37
    2696:	98 ad       	ldd	r25, Y+56	; 0x38
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e2       	ldi	r20, 0x20	; 32
    269e:	51 e4       	ldi	r21, 0x41	; 65
    26a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	98 ab       	std	Y+48, r25	; 0x30
    26b6:	8f a7       	std	Y+47, r24	; 0x2f
    26b8:	0f c0       	rjmp	.+30     	; 0x26d8 <Calc_app+0x7ba>
    26ba:	89 e1       	ldi	r24, 0x19	; 25
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	9e a7       	std	Y+46, r25	; 0x2e
    26c0:	8d a7       	std	Y+45, r24	; 0x2d
    26c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    26c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <Calc_app+0x7a8>
    26ca:	9e a7       	std	Y+46, r25	; 0x2e
    26cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d0:	98 a9       	ldd	r25, Y+48	; 0x30
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	98 ab       	std	Y+48, r25	; 0x30
    26d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26da:	98 a9       	ldd	r25, Y+48	; 0x30
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	69 f7       	brne	.-38     	; 0x26ba <Calc_app+0x79c>
    26e0:	14 c0       	rjmp	.+40     	; 0x270a <Calc_app+0x7ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e2:	69 a9       	ldd	r22, Y+49	; 0x31
    26e4:	7a a9       	ldd	r23, Y+50	; 0x32
    26e6:	8b a9       	ldd	r24, Y+51	; 0x33
    26e8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	98 ab       	std	Y+48, r25	; 0x30
    26f4:	8f a7       	std	Y+47, r24	; 0x2f
    26f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f8:	98 a9       	ldd	r25, Y+48	; 0x30
    26fa:	9c a7       	std	Y+44, r25	; 0x2c
    26fc:	8b a7       	std	Y+43, r24	; 0x2b
    26fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2700:	9c a5       	ldd	r25, Y+44	; 0x2c
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <Calc_app+0x7e4>
    2706:	9c a7       	std	Y+44, r25	; 0x2c
    2708:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(200);

        // Check if the pressed key is the equal sign (=)
        if (temp == '=')
    270a:	fe 01       	movw	r30, r28
    270c:	ed 59       	subi	r30, 0x9D	; 157
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	8d 33       	cpi	r24, 0x3D	; 61
    2714:	49 f4       	brne	.+18     	; 0x2728 <Calc_app+0x80a>
        {
            equal = temp;
    2716:	fe 01       	movw	r30, r28
    2718:	e5 59       	subi	r30, 0x95	; 149
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	de 01       	movw	r26, r28
    271e:	ad 59       	subi	r26, 0x9D	; 157
    2720:	bf 4f       	sbci	r27, 0xFF	; 255
    2722:	8c 91       	ld	r24, X
    2724:	80 83       	st	Z, r24
    2726:	9f c0       	rjmp	.+318    	; 0x2866 <Calc_app+0x948>
            break;
        }

        arr2[i] = temp;
    2728:	fe 01       	movw	r30, r28
    272a:	ec 59       	subi	r30, 0x9C	; 156
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	20 81       	ld	r18, Z
    2730:	31 81       	ldd	r19, Z+1	; 0x01
    2732:	ce 01       	movw	r24, r28
    2734:	8c 58       	subi	r24, 0x8C	; 140
    2736:	9f 4f       	sbci	r25, 0xFF	; 255
    2738:	dc 01       	movw	r26, r24
    273a:	a2 0f       	add	r26, r18
    273c:	b3 1f       	adc	r27, r19
    273e:	fe 01       	movw	r30, r28
    2740:	ed 59       	subi	r30, 0x9D	; 157
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 81       	ld	r24, Z
    2746:	8c 93       	st	X, r24
        LCD_intgerToString(temp);
    2748:	fe 01       	movw	r30, r28
    274a:	ed 59       	subi	r30, 0x9D	; 157
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	88 2f       	mov	r24, r24
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_intgerToString>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	a8 e4       	ldi	r26, 0x48	; 72
    275e:	b3 e4       	ldi	r27, 0x43	; 67
    2760:	8f a3       	std	Y+39, r24	; 0x27
    2762:	98 a7       	std	Y+40, r25	; 0x28
    2764:	a9 a7       	std	Y+41, r26	; 0x29
    2766:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2768:	6f a1       	ldd	r22, Y+39	; 0x27
    276a:	78 a5       	ldd	r23, Y+40	; 0x28
    276c:	89 a5       	ldd	r24, Y+41	; 0x29
    276e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a e7       	ldi	r20, 0x7A	; 122
    2776:	53 e4       	ldi	r21, 0x43	; 67
    2778:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	8b a3       	std	Y+35, r24	; 0x23
    2782:	9c a3       	std	Y+36, r25	; 0x24
    2784:	ad a3       	std	Y+37, r26	; 0x25
    2786:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2788:	6b a1       	ldd	r22, Y+35	; 0x23
    278a:	7c a1       	ldd	r23, Y+36	; 0x24
    278c:	8d a1       	ldd	r24, Y+37	; 0x25
    278e:	9e a1       	ldd	r25, Y+38	; 0x26
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	2c f4       	brge	.+10     	; 0x27aa <Calc_app+0x88c>
		__ticks = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9a a3       	std	Y+34, r25	; 0x22
    27a6:	89 a3       	std	Y+33, r24	; 0x21
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <Calc_app+0x90a>
	else if (__tmp > 65535)
    27aa:	6b a1       	ldd	r22, Y+35	; 0x23
    27ac:	7c a1       	ldd	r23, Y+36	; 0x24
    27ae:	8d a1       	ldd	r24, Y+37	; 0x25
    27b0:	9e a1       	ldd	r25, Y+38	; 0x26
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27be:	18 16       	cp	r1, r24
    27c0:	4c f5       	brge	.+82     	; 0x2814 <Calc_app+0x8f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c2:	6f a1       	ldd	r22, Y+39	; 0x27
    27c4:	78 a5       	ldd	r23, Y+40	; 0x28
    27c6:	89 a5       	ldd	r24, Y+41	; 0x29
    27c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9a a3       	std	Y+34, r25	; 0x22
    27e8:	89 a3       	std	Y+33, r24	; 0x21
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <Calc_app+0x8ec>
    27ec:	89 e1       	ldi	r24, 0x19	; 25
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	98 a3       	std	Y+32, r25	; 0x20
    27f2:	8f 8f       	std	Y+31, r24	; 0x1f
    27f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f6:	98 a1       	ldd	r25, Y+32	; 0x20
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <Calc_app+0x8da>
    27fc:	98 a3       	std	Y+32, r25	; 0x20
    27fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	89 a1       	ldd	r24, Y+33	; 0x21
    2802:	9a a1       	ldd	r25, Y+34	; 0x22
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	9a a3       	std	Y+34, r25	; 0x22
    2808:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	89 a1       	ldd	r24, Y+33	; 0x21
    280c:	9a a1       	ldd	r25, Y+34	; 0x22
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <Calc_app+0x8ce>
    2812:	14 c0       	rjmp	.+40     	; 0x283c <Calc_app+0x91e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	6b a1       	ldd	r22, Y+35	; 0x23
    2816:	7c a1       	ldd	r23, Y+36	; 0x24
    2818:	8d a1       	ldd	r24, Y+37	; 0x25
    281a:	9e a1       	ldd	r25, Y+38	; 0x26
    281c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9a a3       	std	Y+34, r25	; 0x22
    2826:	89 a3       	std	Y+33, r24	; 0x21
    2828:	89 a1       	ldd	r24, Y+33	; 0x21
    282a:	9a a1       	ldd	r25, Y+34	; 0x22
    282c:	9e 8f       	std	Y+30, r25	; 0x1e
    282e:	8d 8f       	std	Y+29, r24	; 0x1d
    2830:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2832:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <Calc_app+0x916>
    2838:	9e 8f       	std	Y+30, r25	; 0x1e
    283a:	8d 8f       	std	Y+29, r24	; 0x1d

    LCD_displayCharacter(operator);
    _delay_ms(200);

    // Get the second number from the user
    for (int i = 0; i < 3; i++)
    283c:	de 01       	movw	r26, r28
    283e:	ac 59       	subi	r26, 0x9C	; 156
    2840:	bf 4f       	sbci	r27, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	ec 59       	subi	r30, 0x9C	; 156
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	9c 93       	st	X, r25
    2852:	8e 93       	st	-X, r24
    2854:	fe 01       	movw	r30, r28
    2856:	ec 59       	subi	r30, 0x9C	; 156
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	83 30       	cpi	r24, 0x03	; 3
    2860:	91 05       	cpc	r25, r1
    2862:	0c f4       	brge	.+2      	; 0x2866 <Calc_app+0x948>
    2864:	da ce       	rjmp	.-588    	; 0x261a <Calc_app+0x6fc>
        LCD_intgerToString(temp);
        _delay_ms(200);
    }

    // Convert the second number from an array of digits to a single number
    if (arr2[0] == 'U' && arr2[1] == 'U' && arr2[2] == 'U')
    2866:	fe 01       	movw	r30, r28
    2868:	ec 58       	subi	r30, 0x8C	; 140
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	85 35       	cpi	r24, 0x55	; 85
    2870:	91 f4       	brne	.+36     	; 0x2896 <Calc_app+0x978>
    2872:	fe 01       	movw	r30, r28
    2874:	ec 58       	subi	r30, 0x8C	; 140
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	81 81       	ldd	r24, Z+1	; 0x01
    287a:	85 35       	cpi	r24, 0x55	; 85
    287c:	61 f4       	brne	.+24     	; 0x2896 <Calc_app+0x978>
    287e:	fe 01       	movw	r30, r28
    2880:	ec 58       	subi	r30, 0x8C	; 140
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	85 35       	cpi	r24, 0x55	; 85
    2888:	31 f4       	brne	.+12     	; 0x2896 <Calc_app+0x978>
    {
        num2 = 0;
    288a:	fe 01       	movw	r30, r28
    288c:	e3 59       	subi	r30, 0x93	; 147
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	11 82       	std	Z+1, r1	; 0x01
    2892:	10 82       	st	Z, r1
    2894:	72 c0       	rjmp	.+228    	; 0x297a <Calc_app+0xa5c>
    }
    else if (arr2[1] == 'U' && arr2[2] == 'U')
    2896:	fe 01       	movw	r30, r28
    2898:	ec 58       	subi	r30, 0x8C	; 140
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	81 81       	ldd	r24, Z+1	; 0x01
    289e:	85 35       	cpi	r24, 0x55	; 85
    28a0:	91 f4       	brne	.+36     	; 0x28c6 <Calc_app+0x9a8>
    28a2:	fe 01       	movw	r30, r28
    28a4:	ec 58       	subi	r30, 0x8C	; 140
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	85 35       	cpi	r24, 0x55	; 85
    28ac:	61 f4       	brne	.+24     	; 0x28c6 <Calc_app+0x9a8>
    {
        num2 = arr2[0];
    28ae:	fe 01       	movw	r30, r28
    28b0:	ec 58       	subi	r30, 0x8C	; 140
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	fe 01       	movw	r30, r28
    28b8:	e3 59       	subi	r30, 0x93	; 147
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	80 83       	st	Z, r24
    28c4:	5a c0       	rjmp	.+180    	; 0x297a <Calc_app+0xa5c>
    }
    else if (arr2[2] == 'U')
    28c6:	fe 01       	movw	r30, r28
    28c8:	ec 58       	subi	r30, 0x8C	; 140
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	85 35       	cpi	r24, 0x55	; 85
    28d0:	f1 f4       	brne	.+60     	; 0x290e <Calc_app+0x9f0>
    {
        num2 = (arr2[0] * 10) + arr2[1];
    28d2:	fe 01       	movw	r30, r28
    28d4:	ec 58       	subi	r30, 0x8C	; 140
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 81       	ld	r24, Z
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	9c 01       	movw	r18, r24
    28e0:	22 0f       	add	r18, r18
    28e2:	33 1f       	adc	r19, r19
    28e4:	c9 01       	movw	r24, r18
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	28 0f       	add	r18, r24
    28f0:	39 1f       	adc	r19, r25
    28f2:	fe 01       	movw	r30, r28
    28f4:	ec 58       	subi	r30, 0x8C	; 140
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	81 81       	ldd	r24, Z+1	; 0x01
    28fa:	88 2f       	mov	r24, r24
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	82 0f       	add	r24, r18
    2900:	93 1f       	adc	r25, r19
    2902:	fe 01       	movw	r30, r28
    2904:	e3 59       	subi	r30, 0x93	; 147
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
    290c:	36 c0       	rjmp	.+108    	; 0x297a <Calc_app+0xa5c>
    }
    else
    {
        num2 = (arr2[0] * 100) + (arr2[1] * 10) + arr2[2];
    290e:	fe 01       	movw	r30, r28
    2910:	ec 58       	subi	r30, 0x8C	; 140
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	84 e6       	ldi	r24, 0x64	; 100
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	28 9f       	mul	r18, r24
    2920:	a0 01       	movw	r20, r0
    2922:	29 9f       	mul	r18, r25
    2924:	50 0d       	add	r21, r0
    2926:	38 9f       	mul	r19, r24
    2928:	50 0d       	add	r21, r0
    292a:	11 24       	eor	r1, r1
    292c:	fe 01       	movw	r30, r28
    292e:	ec 58       	subi	r30, 0x8C	; 140
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	81 81       	ldd	r24, Z+1	; 0x01
    2934:	88 2f       	mov	r24, r24
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	9c 01       	movw	r18, r24
    293a:	22 0f       	add	r18, r18
    293c:	33 1f       	adc	r19, r19
    293e:	c9 01       	movw	r24, r18
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	82 0f       	add	r24, r18
    294a:	93 1f       	adc	r25, r19
    294c:	9a 01       	movw	r18, r20
    294e:	28 0f       	add	r18, r24
    2950:	39 1f       	adc	r19, r25
    2952:	fe 01       	movw	r30, r28
    2954:	ec 58       	subi	r30, 0x8C	; 140
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	82 81       	ldd	r24, Z+2	; 0x02
    295a:	88 2f       	mov	r24, r24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	82 0f       	add	r24, r18
    2960:	93 1f       	adc	r25, r19
    2962:	fe 01       	movw	r30, r28
    2964:	e3 59       	subi	r30, 0x93	; 147
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
    296c:	06 c0       	rjmp	.+12     	; 0x297a <Calc_app+0xa5c>
    }

    // Wait for the user to press the equal sign (=)
    while (equal != '=')
        equal = KEYPAD_getPressedKey();
    296e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <KEYPAD_getPressedKey>
    2972:	fe 01       	movw	r30, r28
    2974:	e5 59       	subi	r30, 0x95	; 149
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 83       	st	Z, r24
    {
        num2 = (arr2[0] * 100) + (arr2[1] * 10) + arr2[2];
    }

    // Wait for the user to press the equal sign (=)
    while (equal != '=')
    297a:	fe 01       	movw	r30, r28
    297c:	e5 59       	subi	r30, 0x95	; 149
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	8d 33       	cpi	r24, 0x3D	; 61
    2984:	a1 f7       	brne	.-24     	; 0x296e <Calc_app+0xa50>
        equal = KEYPAD_getPressedKey();

    LCD_displayCharacter(equal);
    2986:	fe 01       	movw	r30, r28
    2988:	e5 59       	subi	r30, 0x95	; 149
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	0e 94 ef 0c 	call	0x19de	; 0x19de <LCD_displayCharacter>
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	a8 e4       	ldi	r26, 0x48	; 72
    2998:	b3 e4       	ldi	r27, 0x43	; 67
    299a:	89 8f       	std	Y+25, r24	; 0x19
    299c:	9a 8f       	std	Y+26, r25	; 0x1a
    299e:	ab 8f       	std	Y+27, r26	; 0x1b
    29a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a2:	69 8d       	ldd	r22, Y+25	; 0x19
    29a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4a e7       	ldi	r20, 0x7A	; 122
    29b0:	53 e4       	ldi	r21, 0x43	; 67
    29b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	8d 8b       	std	Y+21, r24	; 0x15
    29bc:	9e 8b       	std	Y+22, r25	; 0x16
    29be:	af 8b       	std	Y+23, r26	; 0x17
    29c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29c2:	6d 89       	ldd	r22, Y+21	; 0x15
    29c4:	7e 89       	ldd	r23, Y+22	; 0x16
    29c6:	8f 89       	ldd	r24, Y+23	; 0x17
    29c8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e8       	ldi	r20, 0x80	; 128
    29d0:	5f e3       	ldi	r21, 0x3F	; 63
    29d2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29d6:	88 23       	and	r24, r24
    29d8:	2c f4       	brge	.+10     	; 0x29e4 <Calc_app+0xac6>
		__ticks = 1;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	9c 8b       	std	Y+20, r25	; 0x14
    29e0:	8b 8b       	std	Y+19, r24	; 0x13
    29e2:	3f c0       	rjmp	.+126    	; 0x2a62 <Calc_app+0xb44>
	else if (__tmp > 65535)
    29e4:	6d 89       	ldd	r22, Y+21	; 0x15
    29e6:	7e 89       	ldd	r23, Y+22	; 0x16
    29e8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ea:	98 8d       	ldd	r25, Y+24	; 0x18
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	3f ef       	ldi	r19, 0xFF	; 255
    29f0:	4f e7       	ldi	r20, 0x7F	; 127
    29f2:	57 e4       	ldi	r21, 0x47	; 71
    29f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29f8:	18 16       	cp	r1, r24
    29fa:	4c f5       	brge	.+82     	; 0x2a4e <Calc_app+0xb30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fc:	69 8d       	ldd	r22, Y+25	; 0x19
    29fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e2       	ldi	r20, 0x20	; 32
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	9c 8b       	std	Y+20, r25	; 0x14
    2a22:	8b 8b       	std	Y+19, r24	; 0x13
    2a24:	0f c0       	rjmp	.+30     	; 0x2a44 <Calc_app+0xb26>
    2a26:	89 e1       	ldi	r24, 0x19	; 25
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	9a 8b       	std	Y+18, r25	; 0x12
    2a2c:	89 8b       	std	Y+17, r24	; 0x11
    2a2e:	89 89       	ldd	r24, Y+17	; 0x11
    2a30:	9a 89       	ldd	r25, Y+18	; 0x12
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <Calc_app+0xb14>
    2a36:	9a 8b       	std	Y+18, r25	; 0x12
    2a38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	9c 8b       	std	Y+20, r25	; 0x14
    2a42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a44:	8b 89       	ldd	r24, Y+19	; 0x13
    2a46:	9c 89       	ldd	r25, Y+20	; 0x14
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	69 f7       	brne	.-38     	; 0x2a26 <Calc_app+0xb08>
    2a4c:	14 c0       	rjmp	.+40     	; 0x2a76 <Calc_app+0xb58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a50:	7e 89       	ldd	r23, Y+22	; 0x16
    2a52:	8f 89       	ldd	r24, Y+23	; 0x17
    2a54:	98 8d       	ldd	r25, Y+24	; 0x18
    2a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9c 8b       	std	Y+20, r25	; 0x14
    2a60:	8b 8b       	std	Y+19, r24	; 0x13
    2a62:	8b 89       	ldd	r24, Y+19	; 0x13
    2a64:	9c 89       	ldd	r25, Y+20	; 0x14
    2a66:	98 8b       	std	Y+16, r25	; 0x10
    2a68:	8f 87       	std	Y+15, r24	; 0x0f
    2a6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6c:	98 89       	ldd	r25, Y+16	; 0x10
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <Calc_app+0xb50>
    2a72:	98 8b       	std	Y+16, r25	; 0x10
    2a74:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);

    // Perform the calculation based on the operator
    if (operator == '+')
    2a76:	fe 01       	movw	r30, r28
    2a78:	e4 59       	subi	r30, 0x94	; 148
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8b 32       	cpi	r24, 0x2B	; 43
    2a80:	a1 f4       	brne	.+40     	; 0x2aaa <Calc_app+0xb8c>
    {
        result = num1 + num2;
    2a82:	ae 01       	movw	r20, r28
    2a84:	47 59       	subi	r20, 0x97	; 151
    2a86:	5f 4f       	sbci	r21, 0xFF	; 255
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e1 59       	subi	r30, 0x91	; 145
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	de 01       	movw	r26, r28
    2a90:	a3 59       	subi	r26, 0x93	; 147
    2a92:	bf 4f       	sbci	r27, 0xFF	; 255
    2a94:	20 81       	ld	r18, Z
    2a96:	31 81       	ldd	r19, Z+1	; 0x01
    2a98:	8d 91       	ld	r24, X+
    2a9a:	9c 91       	ld	r25, X
    2a9c:	11 97       	sbiw	r26, 0x01	; 1
    2a9e:	82 0f       	add	r24, r18
    2aa0:	93 1f       	adc	r25, r19
    2aa2:	fa 01       	movw	r30, r20
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
    2aa8:	50 c0       	rjmp	.+160    	; 0x2b4a <Calc_app+0xc2c>
    }
    else if (operator == '-')
    2aaa:	fe 01       	movw	r30, r28
    2aac:	e4 59       	subi	r30, 0x94	; 148
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8d 32       	cpi	r24, 0x2D	; 45
    2ab4:	b1 f4       	brne	.+44     	; 0x2ae2 <Calc_app+0xbc4>
    {
        result = num1 - num2;
    2ab6:	ae 01       	movw	r20, r28
    2ab8:	47 59       	subi	r20, 0x97	; 151
    2aba:	5f 4f       	sbci	r21, 0xFF	; 255
    2abc:	fe 01       	movw	r30, r28
    2abe:	e1 59       	subi	r30, 0x91	; 145
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	de 01       	movw	r26, r28
    2ac4:	a3 59       	subi	r26, 0x93	; 147
    2ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac8:	20 81       	ld	r18, Z
    2aca:	31 81       	ldd	r19, Z+1	; 0x01
    2acc:	8d 91       	ld	r24, X+
    2ace:	9c 91       	ld	r25, X
    2ad0:	11 97       	sbiw	r26, 0x01	; 1
    2ad2:	b9 01       	movw	r22, r18
    2ad4:	68 1b       	sub	r22, r24
    2ad6:	79 0b       	sbc	r23, r25
    2ad8:	cb 01       	movw	r24, r22
    2ada:	fa 01       	movw	r30, r20
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	80 83       	st	Z, r24
    2ae0:	34 c0       	rjmp	.+104    	; 0x2b4a <Calc_app+0xc2c>
    }
    else if (operator == '*')
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	e4 59       	subi	r30, 0x94	; 148
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 81       	ld	r24, Z
    2aea:	8a 32       	cpi	r24, 0x2A	; 42
    2aec:	d1 f4       	brne	.+52     	; 0x2b22 <Calc_app+0xc04>
    {
        result = num1 * num2;
    2aee:	ae 01       	movw	r20, r28
    2af0:	47 59       	subi	r20, 0x97	; 151
    2af2:	5f 4f       	sbci	r21, 0xFF	; 255
    2af4:	fe 01       	movw	r30, r28
    2af6:	e1 59       	subi	r30, 0x91	; 145
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	de 01       	movw	r26, r28
    2afc:	a3 59       	subi	r26, 0x93	; 147
    2afe:	bf 4f       	sbci	r27, 0xFF	; 255
    2b00:	20 81       	ld	r18, Z
    2b02:	31 81       	ldd	r19, Z+1	; 0x01
    2b04:	8d 91       	ld	r24, X+
    2b06:	9c 91       	ld	r25, X
    2b08:	11 97       	sbiw	r26, 0x01	; 1
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	26 9f       	mul	r18, r22
    2b0e:	c0 01       	movw	r24, r0
    2b10:	27 9f       	mul	r18, r23
    2b12:	90 0d       	add	r25, r0
    2b14:	36 9f       	mul	r19, r22
    2b16:	90 0d       	add	r25, r0
    2b18:	11 24       	eor	r1, r1
    2b1a:	fa 01       	movw	r30, r20
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	80 83       	st	Z, r24
    2b20:	14 c0       	rjmp	.+40     	; 0x2b4a <Calc_app+0xc2c>
    }
    else
    {
        result = num1 / num2;
    2b22:	8e 01       	movw	r16, r28
    2b24:	07 59       	subi	r16, 0x97	; 151
    2b26:	1f 4f       	sbci	r17, 0xFF	; 255
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e1 59       	subi	r30, 0x91	; 145
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	de 01       	movw	r26, r28
    2b30:	a3 59       	subi	r26, 0x93	; 147
    2b32:	bf 4f       	sbci	r27, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	91 81       	ldd	r25, Z+1	; 0x01
    2b38:	2d 91       	ld	r18, X+
    2b3a:	3c 91       	ld	r19, X
    2b3c:	b9 01       	movw	r22, r18
    2b3e:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__udivmodhi4>
    2b42:	cb 01       	movw	r24, r22
    2b44:	f8 01       	movw	r30, r16
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    }

    // Display the result on the LCD screen
    LCD_intgerToString(result);
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e7 59       	subi	r30, 0x97	; 151
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <LCD_intgerToString>
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	aa ef       	ldi	r26, 0xFA	; 250
    2b5e:	b3 e4       	ldi	r27, 0x43	; 67
    2b60:	8b 87       	std	Y+11, r24	; 0x0b
    2b62:	9c 87       	std	Y+12, r25	; 0x0c
    2b64:	ad 87       	std	Y+13, r26	; 0x0d
    2b66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	4a e7       	ldi	r20, 0x7A	; 122
    2b76:	53 e4       	ldi	r21, 0x43	; 67
    2b78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	8f 83       	std	Y+7, r24	; 0x07
    2b82:	98 87       	std	Y+8, r25	; 0x08
    2b84:	a9 87       	std	Y+9, r26	; 0x09
    2b86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b88:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8a:	78 85       	ldd	r23, Y+8	; 0x08
    2b8c:	89 85       	ldd	r24, Y+9	; 0x09
    2b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	40 e8       	ldi	r20, 0x80	; 128
    2b96:	5f e3       	ldi	r21, 0x3F	; 63
    2b98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b9c:	88 23       	and	r24, r24
    2b9e:	2c f4       	brge	.+10     	; 0x2baa <Calc_app+0xc8c>
		__ticks = 1;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
    2ba8:	3f c0       	rjmp	.+126    	; 0x2c28 <Calc_app+0xd0a>
	else if (__tmp > 65535)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	3f ef       	ldi	r19, 0xFF	; 255
    2bb6:	4f e7       	ldi	r20, 0x7F	; 127
    2bb8:	57 e4       	ldi	r21, 0x47	; 71
    2bba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2bbe:	18 16       	cp	r1, r24
    2bc0:	4c f5       	brge	.+82     	; 0x2c14 <Calc_app+0xcf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	8d 83       	std	Y+5, r24	; 0x05
    2bea:	0f c0       	rjmp	.+30     	; 0x2c0a <Calc_app+0xcec>
    2bec:	89 e1       	ldi	r24, 0x19	; 25
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	8b 83       	std	Y+3, r24	; 0x03
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <Calc_app+0xcda>
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c00:	8d 81       	ldd	r24, Y+5	; 0x05
    2c02:	9e 81       	ldd	r25, Y+6	; 0x06
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	69 f7       	brne	.-38     	; 0x2bec <Calc_app+0xcce>
    2c12:	14 c0       	rjmp	.+40     	; 0x2c3c <Calc_app+0xd1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c14:	6f 81       	ldd	r22, Y+7	; 0x07
    2c16:	78 85       	ldd	r23, Y+8	; 0x08
    2c18:	89 85       	ldd	r24, Y+9	; 0x09
    2c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	9a 81       	ldd	r25, Y+2	; 0x02
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <Calc_app+0xd16>
    2c38:	9a 83       	std	Y+2, r25	; 0x02
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
}
    2c3c:	c0 58       	subi	r28, 0x80	; 128
    2c3e:	df 4f       	sbci	r29, 0xFF	; 255
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	08 95       	ret

00002c54 <main>:

int main()
{
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	2e 97       	sbiw	r28, 0x0e	; 14
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    // Initialize the LCD
    LCD_init();
    2c68:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <LCD_init>

    while (1)
    {
        // Run the calculator application
        Calc_app();
    2c6c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Calc_app>
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	a8 ec       	ldi	r26, 0xC8	; 200
    2c76:	b2 e4       	ldi	r27, 0x42	; 66
    2c78:	8b 87       	std	Y+11, r24	; 0x0b
    2c7a:	9c 87       	std	Y+12, r25	; 0x0c
    2c7c:	ad 87       	std	Y+13, r26	; 0x0d
    2c7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4a e7       	ldi	r20, 0x7A	; 122
    2c8e:	53 e4       	ldi	r21, 0x43	; 67
    2c90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	8f 83       	std	Y+7, r24	; 0x07
    2c9a:	98 87       	std	Y+8, r25	; 0x08
    2c9c:	a9 87       	std	Y+9, r26	; 0x09
    2c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca2:	78 85       	ldd	r23, Y+8	; 0x08
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	5f e3       	ldi	r21, 0x3F	; 63
    2cb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cb4:	88 23       	and	r24, r24
    2cb6:	2c f4       	brge	.+10     	; 0x2cc2 <main+0x6e>
		__ticks = 1;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	3f c0       	rjmp	.+126    	; 0x2d40 <main+0xec>
	else if (__tmp > 65535)
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	57 e4       	ldi	r21, 0x47	; 71
    2cd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	4c f5       	brge	.+82     	; 0x2d2c <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e2       	ldi	r20, 0x20	; 32
    2ce8:	51 e4       	ldi	r21, 0x41	; 65
    2cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	9e 83       	std	Y+6, r25	; 0x06
    2d00:	8d 83       	std	Y+5, r24	; 0x05
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <main+0xce>
    2d04:	89 e1       	ldi	r24, 0x19	; 25
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9c 83       	std	Y+4, r25	; 0x04
    2d0a:	8b 83       	std	Y+3, r24	; 0x03
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <main+0xbc>
    2d14:	9c 83       	std	Y+4, r25	; 0x04
    2d16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d18:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d22:	8d 81       	ldd	r24, Y+5	; 0x05
    2d24:	9e 81       	ldd	r25, Y+6	; 0x06
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	69 f7       	brne	.-38     	; 0x2d04 <main+0xb0>
    2d2a:	14 c0       	rjmp	.+40     	; 0x2d54 <main+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2e:	78 85       	ldd	r23, Y+8	; 0x08
    2d30:	89 85       	ldd	r24, Y+9	; 0x09
    2d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	8d 81       	ldd	r24, Y+5	; 0x05
    2d42:	9e 81       	ldd	r25, Y+6	; 0x06
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	89 83       	std	Y+1, r24	; 0x01
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <main+0xf8>
    2d50:	9a 83       	std	Y+2, r25	; 0x02
    2d52:	89 83       	std	Y+1, r24	; 0x01

        _delay_ms(100);

        // Clear the LCD screen for the next calculation
        LCD_clearScreen();
    2d54:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <LCD_clearScreen>
    2d58:	89 cf       	rjmp	.-238    	; 0x2c6c <main+0x18>

00002d5a <__udivmodhi4>:
    2d5a:	aa 1b       	sub	r26, r26
    2d5c:	bb 1b       	sub	r27, r27
    2d5e:	51 e1       	ldi	r21, 0x11	; 17
    2d60:	07 c0       	rjmp	.+14     	; 0x2d70 <__udivmodhi4_ep>

00002d62 <__udivmodhi4_loop>:
    2d62:	aa 1f       	adc	r26, r26
    2d64:	bb 1f       	adc	r27, r27
    2d66:	a6 17       	cp	r26, r22
    2d68:	b7 07       	cpc	r27, r23
    2d6a:	10 f0       	brcs	.+4      	; 0x2d70 <__udivmodhi4_ep>
    2d6c:	a6 1b       	sub	r26, r22
    2d6e:	b7 0b       	sbc	r27, r23

00002d70 <__udivmodhi4_ep>:
    2d70:	88 1f       	adc	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	5a 95       	dec	r21
    2d76:	a9 f7       	brne	.-22     	; 0x2d62 <__udivmodhi4_loop>
    2d78:	80 95       	com	r24
    2d7a:	90 95       	com	r25
    2d7c:	bc 01       	movw	r22, r24
    2d7e:	cd 01       	movw	r24, r26
    2d80:	08 95       	ret

00002d82 <__prologue_saves__>:
    2d82:	2f 92       	push	r2
    2d84:	3f 92       	push	r3
    2d86:	4f 92       	push	r4
    2d88:	5f 92       	push	r5
    2d8a:	6f 92       	push	r6
    2d8c:	7f 92       	push	r7
    2d8e:	8f 92       	push	r8
    2d90:	9f 92       	push	r9
    2d92:	af 92       	push	r10
    2d94:	bf 92       	push	r11
    2d96:	cf 92       	push	r12
    2d98:	df 92       	push	r13
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	ca 1b       	sub	r28, r26
    2dac:	db 0b       	sbc	r29, r27
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	09 94       	ijmp

00002dba <__epilogue_restores__>:
    2dba:	2a 88       	ldd	r2, Y+18	; 0x12
    2dbc:	39 88       	ldd	r3, Y+17	; 0x11
    2dbe:	48 88       	ldd	r4, Y+16	; 0x10
    2dc0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dc2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dc4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dc6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dc8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dca:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dcc:	b9 84       	ldd	r11, Y+9	; 0x09
    2dce:	c8 84       	ldd	r12, Y+8	; 0x08
    2dd0:	df 80       	ldd	r13, Y+7	; 0x07
    2dd2:	ee 80       	ldd	r14, Y+6	; 0x06
    2dd4:	fd 80       	ldd	r15, Y+5	; 0x05
    2dd6:	0c 81       	ldd	r16, Y+4	; 0x04
    2dd8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dda:	aa 81       	ldd	r26, Y+2	; 0x02
    2ddc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dde:	ce 0f       	add	r28, r30
    2de0:	d1 1d       	adc	r29, r1
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	ed 01       	movw	r28, r26
    2dee:	08 95       	ret

00002df0 <itoa>:
    2df0:	fb 01       	movw	r30, r22
    2df2:	9f 01       	movw	r18, r30
    2df4:	e8 94       	clt
    2df6:	42 30       	cpi	r20, 0x02	; 2
    2df8:	c4 f0       	brlt	.+48     	; 0x2e2a <itoa+0x3a>
    2dfa:	45 32       	cpi	r20, 0x25	; 37
    2dfc:	b4 f4       	brge	.+44     	; 0x2e2a <itoa+0x3a>
    2dfe:	4a 30       	cpi	r20, 0x0A	; 10
    2e00:	29 f4       	brne	.+10     	; 0x2e0c <itoa+0x1c>
    2e02:	97 fb       	bst	r25, 7
    2e04:	1e f4       	brtc	.+6      	; 0x2e0c <itoa+0x1c>
    2e06:	90 95       	com	r25
    2e08:	81 95       	neg	r24
    2e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0c:	64 2f       	mov	r22, r20
    2e0e:	77 27       	eor	r23, r23
    2e10:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__udivmodhi4>
    2e14:	80 5d       	subi	r24, 0xD0	; 208
    2e16:	8a 33       	cpi	r24, 0x3A	; 58
    2e18:	0c f0       	brlt	.+2      	; 0x2e1c <itoa+0x2c>
    2e1a:	89 5d       	subi	r24, 0xD9	; 217
    2e1c:	81 93       	st	Z+, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	a1 f7       	brne	.-24     	; 0x2e0c <itoa+0x1c>
    2e24:	16 f4       	brtc	.+4      	; 0x2e2a <itoa+0x3a>
    2e26:	5d e2       	ldi	r21, 0x2D	; 45
    2e28:	51 93       	st	Z+, r21
    2e2a:	10 82       	st	Z, r1
    2e2c:	c9 01       	movw	r24, r18
    2e2e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <strrev>

00002e32 <strrev>:
    2e32:	dc 01       	movw	r26, r24
    2e34:	fc 01       	movw	r30, r24
    2e36:	67 2f       	mov	r22, r23
    2e38:	71 91       	ld	r23, Z+
    2e3a:	77 23       	and	r23, r23
    2e3c:	e1 f7       	brne	.-8      	; 0x2e36 <strrev+0x4>
    2e3e:	32 97       	sbiw	r30, 0x02	; 2
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <strrev+0x18>
    2e42:	7c 91       	ld	r23, X
    2e44:	6d 93       	st	X+, r22
    2e46:	70 83       	st	Z, r23
    2e48:	62 91       	ld	r22, -Z
    2e4a:	ae 17       	cp	r26, r30
    2e4c:	bf 07       	cpc	r27, r31
    2e4e:	c8 f3       	brcs	.-14     	; 0x2e42 <strrev+0x10>
    2e50:	08 95       	ret

00002e52 <_exit>:
    2e52:	f8 94       	cli

00002e54 <__stop_program>:
    2e54:	ff cf       	rjmp	.-2      	; 0x2e54 <__stop_program>
